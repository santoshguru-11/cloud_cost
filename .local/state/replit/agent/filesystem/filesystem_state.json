{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Cloud Cost Optimizer\n\n## Overview\n\nCloud Cost Optimizer is a web application designed to help businesses compare and optimize their cloud infrastructure costs across multiple cloud providers (AWS, Azure, GCP, and Oracle Cloud). The application provides comprehensive cost analysis, real-time comparisons, and optimization recommendations through an intuitive interface.\n\nThe system allows users to input their infrastructure requirements including compute specifications, storage needs, database requirements, and networking configurations. It then calculates costs across all major cloud providers and provides detailed breakdowns, charts, and recommendations for cost optimization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **Form Handling**: React Hook Form with Zod validation for type-safe form validation\n- **Charts**: Chart.js integration for cost visualization and comparison charts\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **API Design**: RESTful API endpoints for cost calculations and analysis retrieval\n- **Request Handling**: JSON-based request/response with comprehensive error handling\n- **Logging**: Custom request logging middleware for API monitoring\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon Database (@neondatabase/serverless) for serverless PostgreSQL\n- **Development Storage**: In-memory storage implementation for development/testing\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Data Models**: Structured cost analysis storage with JSON fields for flexible requirement and result storage\n\n### Authentication and Authorization\n- **Session Management**: Basic session handling (prepared for future enhancement)\n- **Security**: CORS enabled, JSON parsing middleware, and request validation\n\n### Cost Calculation Engine\n- **Pricing Data**: Static JSON-based pricing database with regional multipliers\n- **Calculation Logic**: Modular cost calculator supporting multiple cloud providers\n- **Provider Support**: AWS, Azure, GCP, and Oracle Cloud with service-specific pricing\n- **Multi-cloud Optimization**: Advanced algorithm to recommend optimal service distribution across providers\n- **Cost Categories**: Separate calculations for compute, storage, database, and networking costs\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL provider for production database hosting\n- **Drizzle ORM**: Type-safe database toolkit for PostgreSQL operations\n- **Connection Management**: Environment-based database URL configuration\n\n### UI and Styling Libraries\n- **shadcn/ui**: Comprehensive component library built on Radix UI primitives\n- **Radix UI**: Accessible component primitives for dialogs, forms, navigation, and data display\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n\n### Development and Build Tools\n- **Vite**: Fast build tool with hot module replacement and optimized production builds\n- **TypeScript**: Static type checking across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production server builds\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer\n\n### Form and Validation\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: TypeScript-first schema validation for forms and API requests\n- **Hookform Resolvers**: Integration between React Hook Form and Zod validation\n\n### Data Fetching and State\n- **TanStack React Query**: Server state management with caching, synchronization, and background updates\n- **Custom API Client**: Fetch-based HTTP client with error handling and credential management\n\n### Chart and Visualization\n- **Chart.js**: External JavaScript charting library loaded dynamically for cost visualizations\n- **Custom Chart Components**: React wrappers for Chart.js integration with cost data\n\n### Deployment and Hosting\n- **Replit Integration**: Development environment integration with runtime error overlays\n- **Environment Configuration**: NODE_ENV-based configuration for development and production\n- **Static Asset Serving**: Vite-based static file serving in development, Express static serving in production","size_bytes":4752},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { ComprehensiveCostCalculator } from \"./utils/comprehensiveCostCalculator\";\nimport { infrastructureRequirementsSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const costCalculator = new ComprehensiveCostCalculator();\n\n  // Calculate costs endpoint\n  app.post(\"/api/calculate\", async (req, res) => {\n    try {\n      const requirements = infrastructureRequirementsSchema.parse(req.body);\n      const results = costCalculator.calculateCosts(requirements);\n      \n      // Save to storage\n      const analysis = await storage.createCostAnalysis({\n        requirements,\n        results\n      });\n\n      res.json({\n        analysisId: analysis.id,\n        results\n      });\n    } catch (error) {\n      console.error(\"Cost calculation error:\", error);\n      res.status(400).json({ \n        message: error instanceof Error ? error.message : \"Invalid requirements data\" \n      });\n    }\n  });\n\n  // Get analysis by ID\n  app.get(\"/api/analysis/:id\", async (req, res) => {\n    try {\n      const analysis = await storage.getCostAnalysis(req.params.id);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Get analysis error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve analysis\" });\n    }\n  });\n\n  // Get all analyses\n  app.get(\"/api/analyses\", async (req, res) => {\n    try {\n      const analyses = await storage.getAllCostAnalyses();\n      res.json(analyses);\n    } catch (error) {\n      console.error(\"Get analyses error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve analyses\" });\n    }\n  });\n\n  // Export results as CSV\n  app.get(\"/api/export/:id/csv\", async (req, res) => {\n    try {\n      const analysis = await storage.getCostAnalysis(req.params.id);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n\n      const results = analysis.results as any;\n      let csv = \"Provider,Compute,Storage,Database,Networking,Total\\n\";\n      \n      results.providers.forEach((provider: any) => {\n        csv += `${provider.name},${provider.compute},${provider.storage},${provider.database},${provider.networking},${provider.total}\\n`;\n      });\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=cost-analysis-${req.params.id}.csv`);\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Export CSV error:\", error);\n      res.status(500).json({ message: \"Failed to export CSV\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":2822},"server/storage.ts":{"content":"import { type CostAnalysis, type InsertCostAnalysis } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getCostAnalysis(id: string): Promise<CostAnalysis | undefined>;\n  createCostAnalysis(analysis: InsertCostAnalysis): Promise<CostAnalysis>;\n  getAllCostAnalyses(): Promise<CostAnalysis[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private analyses: Map<string, CostAnalysis>;\n\n  constructor() {\n    this.analyses = new Map();\n  }\n\n  async getCostAnalysis(id: string): Promise<CostAnalysis | undefined> {\n    return this.analyses.get(id);\n  }\n\n  async createCostAnalysis(insertAnalysis: InsertCostAnalysis): Promise<CostAnalysis> {\n    const id = randomUUID();\n    const analysis: CostAnalysis = { \n      ...insertAnalysis, \n      id, \n      createdAt: new Date().toISOString()\n    };\n    this.analyses.set(id, analysis);\n    return analysis;\n  }\n\n  async getAllCostAnalyses(): Promise<CostAnalysis[]> {\n    return Array.from(this.analyses.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1147},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, varchar, integer, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { sql } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const costAnalyses = pgTable(\"cost_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requirements: jsonb(\"requirements\").notNull(),\n  results: jsonb(\"results\").notNull(),\n  createdAt: text(\"created_at\").default(sql`now()`),\n});\n\nexport const insertCostAnalysisSchema = createInsertSchema(costAnalyses).pick({\n  requirements: true,\n  results: true,\n});\n\nexport type InsertCostAnalysis = z.infer<typeof insertCostAnalysisSchema>;\nexport type CostAnalysis = typeof costAnalyses.$inferSelect;\n\n// Frontend-specific schemas for form validation\nexport const infrastructureRequirementsSchema = z.object({\n  // Currency and Licensing\n  currency: z.enum(['USD', 'INR', 'EUR', 'KWD']).default('USD'), // USD, Indian Rupee, Euro, Kuwaiti Dinar\n  licensing: z.object({\n    windows: z.object({\n      enabled: z.boolean().default(false),\n      licenses: z.number().min(0).max(1000).default(0),\n    }),\n    sqlServer: z.object({\n      enabled: z.boolean().default(false),\n      edition: z.enum(['express', 'standard', 'enterprise']).default('standard'),\n      licenses: z.number().min(0).max(1000).default(0),\n    }),\n    oracle: z.object({\n      enabled: z.boolean().default(false),\n      edition: z.enum(['standard', 'enterprise']).default('standard'),\n      licenses: z.number().min(0).max(1000).default(0),\n    }),\n    vmware: z.object({\n      enabled: z.boolean().default(false),\n      licenses: z.number().min(0).max(1000).default(0),\n    }),\n    redhat: z.object({\n      enabled: z.boolean().default(false),\n      licenses: z.number().min(0).max(1000).default(0),\n    }),\n    sap: z.object({\n      enabled: z.boolean().default(false),\n      licenses: z.number().min(0).max(1000).default(0),\n    }),\n    microsoftOffice365: z.object({\n      enabled: z.boolean().default(false),\n      licenses: z.number().min(0).max(10000).default(0),\n    }),\n  }),\n  // Compute Services\n  compute: z.object({\n    vcpus: z.number().min(1).max(128),\n    ram: z.number().min(1).max(1024),\n    instanceType: z.enum(['general-purpose', 'compute-optimized', 'memory-optimized', 'storage-optimized']),\n    region: z.string().min(1),\n    operatingSystem: z.enum(['linux', 'windows']).default('linux'),\n    bootVolume: z.object({\n      size: z.number().min(8).max(1024).default(30), // GB, minimum 8GB for OS\n      type: z.enum(['ssd-gp3', 'ssd-gp2', 'ssd-io2', 'hdd-standard']).default('ssd-gp3'),\n      iops: z.number().min(100).max(16000).default(3000), // only applicable for io2\n    }),\n    serverless: z.object({\n      functions: z.number().min(0).max(1000000).default(0),\n      executionTime: z.number().min(0).max(15).default(1), // minutes\n    }).optional(),\n  }),\n  \n  // Storage Services\n  storage: z.object({\n    objectStorage: z.object({\n      size: z.number().min(0).max(100000).default(0), // GB\n      tier: z.enum(['standard', 'infrequent-access', 'glacier', 'deep-archive']).default('standard'),\n      requests: z.number().min(0).max(10000000).default(10000), // per month\n    }),\n    blockStorage: z.object({\n      size: z.number().min(0).max(100000).default(0), // GB\n      type: z.enum(['ssd-gp3', 'ssd-io2', 'hdd-st1']).default('ssd-gp3'),\n      iops: z.number().min(100).max(100000).default(3000),\n    }),\n    fileStorage: z.object({\n      size: z.number().min(0).max(100000).default(0), // GB\n      performanceMode: z.enum(['general-purpose', 'max-io']).default('general-purpose'),\n    }),\n  }),\n  \n  // Database Services\n  database: z.object({\n    relational: z.object({\n      engine: z.enum(['mysql', 'postgresql', 'oracle', 'sql-server', 'mariadb']).default('mysql'),\n      instanceClass: z.enum(['micro', 'small', 'medium', 'large', 'xlarge']).default('small'),\n      storage: z.number().min(0).max(10000).default(0), // GB\n      multiAZ: z.boolean().default(false),\n    }),\n    nosql: z.object({\n      engine: z.enum(['dynamodb', 'mongodb', 'cassandra', 'none']).default('none'),\n      readCapacity: z.number().min(0).max(40000).default(0),\n      writeCapacity: z.number().min(0).max(40000).default(0),\n      storage: z.number().min(0).max(10000).default(0), // GB\n    }),\n    cache: z.object({\n      engine: z.enum(['redis', 'memcached', 'none']).default('none'),\n      instanceClass: z.enum(['micro', 'small', 'medium', 'large']).default('small'),\n      nodes: z.number().min(0).max(100).default(0),\n    }),\n    dataWarehouse: z.object({\n      nodes: z.number().min(0).max(100).default(0),\n      nodeType: z.enum(['small', 'medium', 'large', 'xlarge']).default('small'),\n      storage: z.number().min(0).max(100000).default(0), // GB\n    }),\n  }),\n  \n  // Networking & CDN\n  networking: z.object({\n    bandwidth: z.number().min(1).max(100000),\n    loadBalancer: z.enum(['none', 'application', 'network']),\n    cdn: z.object({\n      enabled: z.boolean().default(false),\n      requests: z.number().min(0).max(10000000).default(0), // per month\n      dataTransfer: z.number().min(0).max(100000).default(0), // GB\n    }),\n    dns: z.object({\n      hostedZones: z.number().min(0).max(100).default(0),\n      queries: z.number().min(0).max(100000000).default(0), // per month\n    }),\n    vpn: z.object({\n      connections: z.number().min(0).max(100).default(0),\n      hours: z.number().min(0).max(8760).default(0), // per month\n    }),\n  }),\n  \n  // Analytics & Big Data\n  analytics: z.object({\n    dataProcessing: z.object({\n      hours: z.number().min(0).max(10000).default(0), // cluster hours per month\n      nodeType: z.enum(['small', 'medium', 'large', 'xlarge']).default('small'),\n    }),\n    streaming: z.object({\n      shards: z.number().min(0).max(1000).default(0),\n      records: z.number().min(0).max(1000000000).default(0), // per month\n    }),\n    businessIntelligence: z.object({\n      users: z.number().min(0).max(10000).default(0),\n      queries: z.number().min(0).max(1000000).default(0), // per month\n    }),\n  }),\n  \n  // Machine Learning & AI\n  ai: z.object({\n    training: z.object({\n      hours: z.number().min(0).max(10000).default(0), // compute hours per month\n      instanceType: z.enum(['cpu', 'gpu-small', 'gpu-large']).default('cpu'),\n    }),\n    inference: z.object({\n      requests: z.number().min(0).max(10000000).default(0), // per month\n      instanceType: z.enum(['cpu', 'gpu-small', 'gpu-large']).default('cpu'),\n    }),\n    prebuilt: z.object({\n      imageAnalysis: z.number().min(0).max(1000000).default(0), // images per month\n      textProcessing: z.number().min(0).max(10000000).default(0), // characters per month\n      speechServices: z.number().min(0).max(1000000).default(0), // requests per month\n    }),\n  }),\n  \n  // Security & Identity\n  security: z.object({\n    webFirewall: z.object({\n      enabled: z.boolean().default(false),\n      requests: z.number().min(0).max(1000000000).default(0), // per month\n    }),\n    identityManagement: z.object({\n      users: z.number().min(0).max(1000000).default(0),\n      authentications: z.number().min(0).max(10000000).default(0), // per month\n    }),\n    keyManagement: z.object({\n      keys: z.number().min(0).max(100000).default(0),\n      operations: z.number().min(0).max(10000000).default(0), // per month\n    }),\n    threatDetection: z.object({\n      enabled: z.boolean().default(false),\n      events: z.number().min(0).max(10000000).default(0), // per month\n    }),\n  }),\n  \n  // Management & Monitoring\n  monitoring: z.object({\n    metrics: z.number().min(0).max(1000000).default(0), // custom metrics\n    logs: z.number().min(0).max(1000).default(0), // GB ingested per month\n    traces: z.number().min(0).max(10000000).default(0), // traces per month\n    alerts: z.number().min(0).max(10000).default(0), // alert notifications per month\n  }),\n  \n  // Developer Tools & DevOps\n  devops: z.object({\n    cicd: z.object({\n      buildMinutes: z.number().min(0).max(100000).default(0), // per month\n      parallelJobs: z.number().min(0).max(100).default(0),\n    }),\n    containerRegistry: z.object({\n      storage: z.number().min(0).max(10000).default(0), // GB\n      pulls: z.number().min(0).max(1000000).default(0), // per month\n    }),\n    apiManagement: z.object({\n      requests: z.number().min(0).max(1000000000).default(0), // per month\n      endpoints: z.number().min(0).max(10000).default(0),\n    }),\n  }),\n  \n  // Migration & Backup\n  backup: z.object({\n    storage: z.number().min(0).max(100000).default(0), // GB\n    frequency: z.enum(['daily', 'weekly', 'monthly']).default('daily'),\n    retention: z.number().min(7).max(2555).default(30), // days\n  }),\n  \n  // IoT & Edge Computing\n  iot: z.object({\n    devices: z.number().min(0).max(1000000).default(0),\n    messages: z.number().min(0).max(1000000000).default(0), // per month\n    dataProcessing: z.number().min(0).max(100000).default(0), // GB per month\n    edgeLocations: z.number().min(0).max(1000).default(0),\n  }),\n  \n  // Content & Media\n  media: z.object({\n    videoStreaming: z.object({\n      hours: z.number().min(0).max(100000).default(0), // streaming hours per month\n      quality: z.enum(['720p', '1080p', '4k']).default('1080p'),\n    }),\n    transcoding: z.object({\n      minutes: z.number().min(0).max(100000).default(0), // per month\n      inputFormat: z.enum(['standard', 'hd', '4k']).default('standard'),\n    }),\n  }),\n  \n  // Quantum Computing Services\n  quantum: z.object({\n    processingUnits: z.number().min(0).max(1000).default(0), // QPU hours per month\n    quantumAlgorithms: z.enum(['optimization', 'simulation', 'cryptography', 'ml']).default('optimization'),\n    circuitComplexity: z.enum(['basic', 'intermediate', 'advanced']).default('basic'),\n  }),\n  \n  // Advanced AI/ML Platform Services\n  advancedAI: z.object({\n    vectorDatabase: z.object({\n      dimensions: z.number().min(0).max(10000000).default(0), // vector dimensions stored\n      queries: z.number().min(0).max(100000000).default(0), // queries per month\n    }),\n    customChips: z.object({\n      tpuHours: z.number().min(0).max(100000).default(0), // TPU hours per month\n      inferenceChips: z.number().min(0).max(100000).default(0), // specialized chip hours\n    }),\n    modelHosting: z.object({\n      models: z.number().min(0).max(1000).default(0), // number of models hosted\n      requests: z.number().min(0).max(1000000000).default(0), // inference requests per month\n    }),\n    ragPipelines: z.object({\n      documents: z.number().min(0).max(10000000).default(0), // documents processed\n      embeddings: z.number().min(0).max(100000000).default(0), // embeddings generated per month\n    }),\n  }),\n  \n  // Edge Computing & 5G Services\n  edge: z.object({\n    edgeLocations: z.number().min(0).max(10000).default(0), // number of edge locations\n    edgeCompute: z.number().min(0).max(100000).default(0), // edge compute hours per month\n    fiveGNetworking: z.object({\n      networkSlices: z.number().min(0).max(1000).default(0), // 5G network slices\n      privateNetworks: z.number().min(0).max(100).default(0), // private 5G networks\n    }),\n    realTimeProcessing: z.number().min(0).max(1000000).default(0), // real-time events per month\n  }),\n  \n  // Confidential Computing\n  confidential: z.object({\n    secureEnclaves: z.number().min(0).max(10000).default(0), // secure enclave hours per month\n    trustedExecution: z.number().min(0).max(100000).default(0), // trusted execution hours\n    privacyPreservingAnalytics: z.number().min(0).max(1000000).default(0), // operations per month\n    zeroTrustProcessing: z.number().min(0).max(100000).default(0), // GB processed per month\n  }),\n  \n  // Sustainability & Green Computing\n  sustainability: z.object({\n    carbonFootprintTracking: z.boolean().default(false),\n    renewableEnergyPreference: z.boolean().default(false),\n    greenCloudOptimization: z.boolean().default(false),\n    carbonOffsetCredits: z.number().min(0).max(100000).default(0), // tons CO2 offset\n  }),\n  \n  // Advanced Scenarios\n  scenarios: z.object({\n    disasterRecovery: z.object({\n      enabled: z.boolean().default(false),\n      rtoHours: z.number().min(1).max(168).default(24), // Recovery Time Objective\n      rpoMinutes: z.number().min(15).max(1440).default(240), // Recovery Point Objective\n      backupRegions: z.number().min(1).max(10).default(1),\n    }),\n    compliance: z.object({\n      frameworks: z.array(z.enum(['gdpr', 'hipaa', 'sox', 'pci', 'iso27001'])).default([]),\n      auditLogging: z.boolean().default(false),\n      dataResidency: z.enum(['us', 'eu', 'asia', 'global']).default('global'),\n    }),\n    migration: z.object({\n      sourceProvider: z.enum(['aws', 'azure', 'gcp', 'oracle', 'on-premise']).optional(),\n      dataToMigrate: z.number().min(0).max(1000000).default(0), // TB\n      applicationComplexity: z.enum(['simple', 'moderate', 'complex']).default('moderate'),\n    }),\n  }),\n  \n  // Cost Optimization Preferences\n  optimization: z.object({\n    reservedInstanceStrategy: z.enum(['none', 'conservative', 'moderate', 'aggressive']).default('moderate'),\n    spotInstanceTolerance: z.number().min(0).max(100).default(10), // percentage of workload suitable for spot\n    autoScalingAggression: z.enum(['minimal', 'moderate', 'aggressive']).default('moderate'),\n    costAlerts: z.object({\n      enabled: z.boolean().default(true),\n      thresholdPercent: z.number().min(5).max(100).default(20), // alert when cost exceeds budget by %\n      notificationPreference: z.enum(['email', 'slack', 'webhook']).default('email'),\n    }),\n  }),\n});\n\nexport type InfrastructureRequirements = z.infer<typeof infrastructureRequirementsSchema>;\n\nexport interface CloudProvider {\n  name: string;\n  compute: number;\n  storage: number;\n  database: number;\n  networking: number;\n  licensing?: number;\n  analytics?: number;\n  ai?: number;\n  security?: number;\n  monitoring?: number;\n  devops?: number;\n  backup?: number;\n  iot?: number;\n  media?: number;\n  quantum?: number;\n  advancedAI?: number;\n  edge?: number;\n  confidential?: number;\n  sustainability?: number;\n  scenarios?: number;\n  total: number;\n  carbonFootprint?: number; // CO2 tons per month\n  renewableEnergyPercent?: number; // percentage renewable energy\n  currency?: string; // Selected currency (USD, INR, EUR, KWD)\n  currencySymbol?: string; // Currency symbol ($, ₹, €, د.ك)\n}\n\nexport interface CostCalculationResult {\n  providers: CloudProvider[];\n  cheapest: CloudProvider;\n  mostExpensive: CloudProvider;\n  potentialSavings: number;\n  multiCloudOption: {\n    cost: number;\n    breakdown: Record<string, string>;\n  };\n  recommendations: {\n    singleCloud: string;\n    multiCloud: string;\n  };\n}\n","size_bytes":14689},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navbar from \"@/components/navbar\";\nimport Home from \"@/pages/home\";\nimport Calculator from \"@/pages/calculator\";\nimport Results from \"@/pages/results\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/calculator\" component={Calculator} />\n      <Route path=\"/results/:id\" component={Results} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <HelmetProvider>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-slate-50\">\n            <Navbar />\n            <main>\n              <Router />\n            </main>\n          </div>\n          <Toaster />\n        </TooltipProvider>\n      </HelmetProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1183},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(213.8095 88.4615% 52.9412%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 98%);\n  --secondary-foreground: hsl(222.2 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215.4 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222.2 84% 4.9%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(213.8095 88.4615% 52.9412%);\n  --chart-1: hsl(213.8095 88.4615% 52.9412%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(213.8095 88.4615% 52.9412%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(213.8095 88.4615% 52.9412%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(213.8095 88.4615% 52.9412% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(213.8095 88.4615% 52.9412% / 0.00);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 3.9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(213.8095 88.4615% 52.9412%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(217.2 32.6% 17.5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 17.5%);\n  --muted-foreground: hsl(215 20.2% 65.1%);\n  --accent: hsl(217.2 32.6% 17.5%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217.2 32.6% 17.5%);\n  --input: hsl(217.2 32.6% 17.5%);\n  --ring: hsl(213.8095 88.4615% 52.9412%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n/* Chart.js global styles */\ncanvas {\n  max-width: 100% !important;\n  height: auto !important;\n}\n\n/* Custom styles for professional look */\n.bg-slate-50 {\n  background-color: hsl(210 40% 98%);\n}\n\n.text-slate-900 {\n  color: hsl(222.2 84% 4.9%);\n}\n\n.text-slate-600 {\n  color: hsl(215.4 16.3% 46.9%);\n}\n\n.text-primary {\n  color: var(--primary);\n}\n\n.bg-primary {\n  background-color: var(--primary);\n}\n\n.hover\\:bg-blue-700:hover {\n  background-color: hsl(213.8095 88.4615% 42.9412%);\n}\n","size_bytes":3828},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/utils/comprehensiveCostCalculator.ts":{"content":"import { InfrastructureRequirements, CloudProvider, CostCalculationResult } from \"@shared/schema\";\nimport pricingData from \"../data/comprehensive-pricing.json\";\n\nexport class ComprehensiveCostCalculator {\n  private pricing = pricingData;\n\n  calculateCosts(requirements: InfrastructureRequirements): CostCalculationResult {\n    const providers = ['aws', 'azure', 'gcp', 'oracle'] as const;\n    const results: CloudProvider[] = [];\n\n    // Calculate region multiplier\n    const regionMultiplier = this.pricing.regions[requirements.compute.region as keyof typeof this.pricing.regions]?.multiplier || 1.0;\n    \n    // Calculate licensing costs (provider-independent)\n    const licensingCosts = this.calculateLicensing(requirements);\n\n    for (const provider of providers) {\n      const costs = {\n        compute: this.calculateCompute(provider, requirements, regionMultiplier),\n        storage: this.calculateStorage(provider, requirements),\n        database: this.calculateDatabase(provider, requirements, regionMultiplier),\n        networking: this.calculateNetworking(provider, requirements),\n        analytics: this.calculateAnalytics(provider, requirements, regionMultiplier),\n        ai: this.calculateAI(provider, requirements, regionMultiplier),\n        security: this.calculateSecurity(provider, requirements, regionMultiplier),\n        monitoring: this.calculateMonitoring(provider, requirements, regionMultiplier),\n        devops: this.calculateDevOps(provider, requirements, regionMultiplier),\n        backup: this.calculateBackup(provider, requirements),\n        iot: this.calculateIoT(provider, requirements, regionMultiplier),\n        media: this.calculateMedia(provider, requirements, regionMultiplier),\n        quantum: this.calculateQuantum(provider, requirements, regionMultiplier),\n        advancedAI: this.calculateAdvancedAI(provider, requirements, regionMultiplier),\n        edge: this.calculateEdge(provider, requirements, regionMultiplier),\n        confidential: this.calculateConfidential(provider, requirements, regionMultiplier),\n        sustainability: this.calculateSustainability(provider, requirements),\n        scenarios: this.calculateScenarios(provider, requirements, regionMultiplier),\n        licensing: licensingCosts,\n      };\n\n      // Apply optimization adjustments\n      const optimizationMultiplier = this.calculateOptimizationMultiplier(provider, requirements);\n      const sustainabilityMultiplier = this.getSustainabilityMultiplier(provider, requirements);\n      \n      const baseCost = Object.values(costs).reduce((sum, cost) => sum + cost, 0);\n      const total = baseCost * optimizationMultiplier * sustainabilityMultiplier;\n      \n      // Calculate carbon footprint and renewable energy\n      const carbonFootprint = this.calculateCarbonFootprint(provider, total);\n      const renewablePercent = this.getRenewableEnergyPercent(provider);\n\n      // Apply currency conversion\n      const currencyRate = this.pricing.currencies[requirements.currency || 'USD']?.rate || 1.0;\n      const convertedTotal = total * currencyRate;\n      const convertedLicensing = costs.licensing * currencyRate;\n\n      results.push({\n        name: provider.toUpperCase(),\n        compute: Math.round(costs.compute * currencyRate * 100) / 100,\n        storage: Math.round(costs.storage * currencyRate * 100) / 100,\n        database: Math.round(costs.database * currencyRate * 100) / 100,\n        networking: Math.round(costs.networking * currencyRate * 100) / 100,\n        licensing: Math.round(convertedLicensing * 100) / 100,\n        total: Math.round((total + costs.licensing) * currencyRate * 100) / 100,\n        // Add extended cost breakdown\n        analytics: Math.round(costs.analytics * currencyRate * 100) / 100,\n        ai: Math.round(costs.ai * currencyRate * 100) / 100,\n        security: Math.round(costs.security * currencyRate * 100) / 100,\n        monitoring: Math.round(costs.monitoring * currencyRate * 100) / 100,\n        devops: Math.round(costs.devops * currencyRate * 100) / 100,\n        backup: Math.round(costs.backup * currencyRate * 100) / 100,\n        iot: Math.round(costs.iot * currencyRate * 100) / 100,\n        media: Math.round(costs.media * currencyRate * 100) / 100,\n        // Add new advanced services\n        quantum: Math.round(costs.quantum * currencyRate * 100) / 100,\n        advancedAI: Math.round(costs.advancedAI * currencyRate * 100) / 100,\n        edge: Math.round(costs.edge * currencyRate * 100) / 100,\n        confidential: Math.round(costs.confidential * currencyRate * 100) / 100,\n        sustainability: Math.round(costs.sustainability * currencyRate * 100) / 100,\n        scenarios: Math.round(costs.scenarios * currencyRate * 100) / 100,\n        // Add sustainability metrics\n        carbonFootprint: Math.round(carbonFootprint * 1000) / 1000,\n        renewableEnergyPercent: renewablePercent,\n        currency: requirements.currency || 'USD',\n        currencySymbol: this.pricing.currencies[requirements.currency || 'USD']?.symbol || '$',\n      } as CloudProvider & Record<string, number | string>);\n    }\n\n    // Sort by total cost\n    results.sort((a, b) => a.total - b.total);\n    \n    const cheapest = results[0];\n    const mostExpensive = results[results.length - 1];\n    const potentialSavings = Math.round((mostExpensive.total - cheapest.total) * 100) / 100;\n\n    // Calculate multi-cloud optimization\n    const multiCloudOption = this.calculateMultiCloudOptimization(results);\n\n    return {\n      providers: results,\n      cheapest,\n      mostExpensive,\n      potentialSavings,\n      multiCloudOption,\n      recommendations: {\n        singleCloud: `${cheapest.name} offers the best overall value at ${cheapest.currencySymbol}${cheapest.total}/month with comprehensive service coverage and competitive pricing across all categories`,\n        multiCloud: `Hybrid approach could save an additional ${cheapest.currencySymbol}${Math.round((cheapest.total - multiCloudOption.cost) * 100) / 100}/month by optimizing service placement across providers`\n      }\n    };\n  }\n\n  private calculateCompute(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.compute[provider as keyof typeof this.pricing.compute];\n    const instancePricing = pricing[req.compute.instanceType];\n    \n    // Base compute cost\n    const vcpuCost = req.compute.vcpus * instancePricing.vcpu * 24 * 30;\n    const ramCost = req.compute.ram * instancePricing.ram * 24 * 30;\n    let baseCost = vcpuCost + ramCost;\n\n    // Windows multiplier\n    if (req.compute.operatingSystem === 'windows') {\n      baseCost *= pricing.windows_multiplier;\n    }\n\n    // Boot volume cost\n    let bootVolumeCost = 0;\n    if (req.compute.bootVolume) {\n      const storagePricing = this.pricing.storage[provider as keyof typeof this.pricing.storage];\n      let volumePrice = 0;\n      \n      // Map boot volume types to storage pricing keys\n      const storageTypeMap: Record<string, string> = {\n        'ssd-gp3': 'ssd-gp3',\n        'ssd-gp2': 'ssd-gp3', // Map gp2 to gp3 pricing\n        'ssd-io2': 'ssd-io2',\n        'hdd-standard': 'hdd-st1'\n      };\n      \n      const storageType = storageTypeMap[req.compute.bootVolume.type] || 'ssd-gp3';\n      volumePrice = storagePricing.block[storageType as keyof typeof storagePricing.block] || 0.08;\n      \n      bootVolumeCost = req.compute.bootVolume.size * volumePrice;\n      \n      // Add IOPS cost for io2 volumes\n      if (req.compute.bootVolume.type === 'ssd-io2' && req.compute.bootVolume.iops > 3000) {\n        const extraIops = req.compute.bootVolume.iops - 3000;\n        const iopsCost = storagePricing.block.iops || 0.005;\n        bootVolumeCost += extraIops * iopsCost;\n      }\n    }\n\n    // Serverless functions\n    let serverlessCost = 0;\n    if (req.compute.serverless) {\n      const pricingAny = pricing as any;\n      const requestCost = req.compute.serverless.functions * (pricingAny.lambda_per_request || pricingAny.functions_per_request || pricingAny.cloud_functions_per_request || 0.0000002);\n      const executionCost = req.compute.serverless.functions * req.compute.serverless.executionTime * (pricingAny.lambda_per_gb_second || pricingAny.functions_per_gb_second || 0.0000166667);\n      serverlessCost = requestCost + executionCost;\n    }\n\n    return (baseCost + bootVolumeCost + serverlessCost) * regionMultiplier;\n  }\n\n  private calculateStorage(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.storage[provider as keyof typeof this.pricing.storage];\n    let totalCost = 0;\n\n    // Object Storage\n    if (req.storage.objectStorage.size > 0) {\n      const storageCost = req.storage.objectStorage.size * pricing.object[req.storage.objectStorage.tier];\n      const requestCost = (req.storage.objectStorage.requests / 1000) * pricing.object.requests_per_1k.get;\n      totalCost += storageCost + requestCost;\n    }\n\n    // Block Storage\n    if (req.storage.blockStorage.size > 0) {\n      const storageCost = req.storage.blockStorage.size * pricing.block[req.storage.blockStorage.type];\n      const iopsCost = req.storage.blockStorage.iops * pricing.block.iops;\n      totalCost += storageCost + iopsCost;\n    }\n\n    // File Storage\n    if (req.storage.fileStorage.size > 0) {\n      totalCost += req.storage.fileStorage.size * pricing.file[req.storage.fileStorage.performanceMode];\n    }\n\n    return totalCost;\n  }\n\n  private calculateDatabase(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.database[provider as keyof typeof this.pricing.database];\n    let totalCost = 0;\n\n    // Relational Database\n    if (req.database.relational.storage > 0) {\n      let instanceCost = pricing.relational[req.database.relational.engine][req.database.relational.instanceClass];\n      if (req.database.relational.multiAZ) {\n        instanceCost *= pricing.relational.multi_az_multiplier;\n      }\n      const storageCost = req.database.relational.storage * pricing.relational.storage_per_gb;\n      totalCost += instanceCost + storageCost;\n    }\n\n    // NoSQL Database\n    if (req.database.nosql.engine !== 'none') {\n      if (req.database.nosql.engine === 'dynamodb') {\n        const readCost = req.database.nosql.readCapacity * pricing.nosql.dynamodb.read_capacity_unit;\n        const writeCost = req.database.nosql.writeCapacity * pricing.nosql.dynamodb.write_capacity_unit;\n        const storageCost = req.database.nosql.storage * pricing.nosql.dynamodb.storage_per_gb;\n        totalCost += readCost + writeCost + storageCost;\n      } else {\n        totalCost += pricing.nosql[req.database.nosql.engine]?.small || 0;\n      }\n    }\n\n    // Cache\n    if (req.database.cache.engine !== 'none' && req.database.cache.nodes > 0) {\n      const cacheCost = pricing.cache[req.database.cache.engine][req.database.cache.instanceClass] * req.database.cache.nodes;\n      totalCost += cacheCost;\n    }\n\n    // Data Warehouse\n    if (req.database.dataWarehouse.nodes > 0) {\n      const warehouseCost = pricing.warehouse[req.database.dataWarehouse.nodeType] * req.database.dataWarehouse.nodes;\n      const storageCost = req.database.dataWarehouse.storage * pricing.warehouse.storage_per_gb;\n      totalCost += warehouseCost + storageCost;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateNetworking(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.networking[provider as keyof typeof this.pricing.networking];\n    let totalCost = 0;\n\n    // Basic bandwidth\n    const bandwidthCost = req.networking.bandwidth * pricing.bandwidth;\n    const loadBalancerCost = pricing.load_balancer[req.networking.loadBalancer];\n    totalCost += bandwidthCost + loadBalancerCost;\n\n    // CDN\n    if (req.networking.cdn.enabled && req.networking.cdn.requests > 0) {\n      const cdnRequestCost = (req.networking.cdn.requests / 10000) * pricing.cdn.requests_per_10k;\n      const cdnDataCost = req.networking.cdn.dataTransfer * pricing.cdn.data_transfer_per_gb;\n      totalCost += cdnRequestCost + cdnDataCost;\n    }\n\n    // DNS\n    if (req.networking.dns.hostedZones > 0) {\n      const zoneCost = req.networking.dns.hostedZones * pricing.dns.hosted_zone;\n      const queryCost = (req.networking.dns.queries / 1000000) * pricing.dns.queries_per_million;\n      totalCost += zoneCost + queryCost;\n    }\n\n    // VPN\n    if (req.networking.vpn.connections > 0) {\n      const vpnCost = req.networking.vpn.connections * req.networking.vpn.hours * pricing.vpn.connection_hour;\n      totalCost += vpnCost;\n    }\n\n    return totalCost;\n  }\n\n  private calculateAnalytics(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.analytics[provider as keyof typeof this.pricing.analytics];\n    let totalCost = 0;\n\n    // Data Processing\n    if (req.analytics.dataProcessing.hours > 0) {\n      totalCost += req.analytics.dataProcessing.hours * pricing.data_processing[req.analytics.dataProcessing.nodeType];\n    }\n\n    // Streaming\n    if (req.analytics.streaming.shards > 0) {\n      const shardCost = req.analytics.streaming.shards * 24 * 30 * pricing.streaming.shard_hour; // Monthly cost\n      const recordCost = (req.analytics.streaming.records / 1000000) * pricing.streaming.record_per_million;\n      totalCost += shardCost + recordCost;\n    }\n\n    // Business Intelligence\n    if (req.analytics.businessIntelligence.users > 0) {\n      const userCost = req.analytics.businessIntelligence.users * pricing.business_intelligence.user_per_month;\n      const queryCost = (req.analytics.businessIntelligence.queries / 1000) * pricing.business_intelligence.query_per_1k;\n      totalCost += userCost + queryCost;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateAI(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.ai[provider as keyof typeof this.pricing.ai];\n    let totalCost = 0;\n\n    // Training\n    if (req.ai.training.hours > 0) {\n      totalCost += req.ai.training.hours * pricing.training[req.ai.training.instanceType];\n    }\n\n    // Inference\n    if (req.ai.inference.requests > 0) {\n      const requestsPerHour = req.ai.inference.requests / 30 / 24; // Convert monthly to hourly\n      totalCost += requestsPerHour * 30 * 24 * pricing.inference[req.ai.inference.instanceType];\n    }\n\n    // Prebuilt Services\n    if (req.ai.prebuilt.imageAnalysis > 0) {\n      totalCost += (req.ai.prebuilt.imageAnalysis / 1000) * pricing.prebuilt.image_analysis_per_1k;\n    }\n    if (req.ai.prebuilt.textProcessing > 0) {\n      totalCost += (req.ai.prebuilt.textProcessing / 1000000) * pricing.prebuilt.text_processing_per_million_chars;\n    }\n    if (req.ai.prebuilt.speechServices > 0) {\n      totalCost += (req.ai.prebuilt.speechServices / 1000) * pricing.prebuilt.speech_per_1k_requests;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateSecurity(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.security[provider as keyof typeof this.pricing.security];\n    let totalCost = 0;\n\n    // Web Firewall\n    if (req.security.webFirewall.enabled && req.security.webFirewall.requests > 0) {\n      totalCost += (req.security.webFirewall.requests / 1000000) * pricing.web_firewall_per_million;\n    }\n\n    // Identity Management\n    if (req.security.identityManagement.users > 0) {\n      const userCost = req.security.identityManagement.users * pricing.identity_per_user;\n      const authCost = req.security.identityManagement.authentications * pricing.identity_per_auth;\n      totalCost += userCost + authCost;\n    }\n\n    // Key Management\n    if (req.security.keyManagement.keys > 0) {\n      const keyCost = req.security.keyManagement.keys * pricing.key_per_key;\n      const operationCost = (req.security.keyManagement.operations / 10000) * pricing.key_per_10k_operations;\n      totalCost += keyCost + operationCost;\n    }\n\n    // Threat Detection\n    if (req.security.threatDetection.enabled) {\n      totalCost += pricing.threat_detection;\n      if (req.security.threatDetection.events > 0) {\n        totalCost += (req.security.threatDetection.events / 1000000) * pricing.threat_per_million_events;\n      }\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateMonitoring(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.monitoring[provider as keyof typeof this.pricing.monitoring];\n    let totalCost = 0;\n\n    if (req.monitoring.metrics > 0) {\n      totalCost += req.monitoring.metrics * pricing.custom_metric;\n    }\n    if (req.monitoring.logs > 0) {\n      totalCost += req.monitoring.logs * pricing.log_ingestion_per_gb;\n    }\n    if (req.monitoring.traces > 0) {\n      totalCost += (req.monitoring.traces / 1000000) * pricing.traces_per_million;\n    }\n    if (req.monitoring.alerts > 0) {\n      totalCost += req.monitoring.alerts * pricing.alert_per_notification;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateDevOps(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.devops[provider as keyof typeof this.pricing.devops];\n    let totalCost = 0;\n\n    // CI/CD\n    if (req.devops.cicd.buildMinutes > 0) {\n      totalCost += req.devops.cicd.buildMinutes * pricing.build_per_minute;\n      totalCost += req.devops.cicd.parallelJobs * pricing.parallel_job;\n    }\n\n    // Container Registry\n    if (req.devops.containerRegistry.storage > 0) {\n      totalCost += req.devops.containerRegistry.storage * pricing.container_registry_per_gb;\n      totalCost += (req.devops.containerRegistry.pulls / 1000) * pricing.container_pulls_per_1k;\n    }\n\n    // API Management\n    if (req.devops.apiManagement.requests > 0) {\n      totalCost += (req.devops.apiManagement.requests / 1000000) * pricing.api_requests_per_million;\n      totalCost += req.devops.apiManagement.endpoints * pricing.api_endpoint;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateBackup(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.backup[provider as keyof typeof this.pricing.backup];\n    let totalCost = 0;\n\n    if (req.backup.storage > 0) {\n      const baseCost = req.backup.storage * pricing.storage_per_gb;\n      const frequencyMultiplier = pricing.frequency_multiplier[req.backup.frequency];\n      totalCost += baseCost * frequencyMultiplier;\n    }\n\n    return totalCost;\n  }\n\n  private calculateIoT(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.iot[provider as keyof typeof this.pricing.iot];\n    let totalCost = 0;\n\n    if (req.iot.devices > 0) {\n      totalCost += req.iot.devices * pricing.device_per_month;\n    }\n    if (req.iot.messages > 0) {\n      totalCost += (req.iot.messages / 1000000) * pricing.message_per_million;\n    }\n    if (req.iot.dataProcessing > 0) {\n      totalCost += req.iot.dataProcessing * pricing.data_processing_per_gb;\n    }\n    if (req.iot.edgeLocations > 0) {\n      totalCost += req.iot.edgeLocations * pricing.edge_location;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateMedia(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.media[provider as keyof typeof this.pricing.media];\n    let totalCost = 0;\n\n    // Video Streaming\n    if (req.media.videoStreaming.hours > 0) {\n      totalCost += req.media.videoStreaming.hours * pricing.streaming_per_hour[req.media.videoStreaming.quality];\n    }\n\n    // Transcoding\n    if (req.media.transcoding.minutes > 0) {\n      totalCost += req.media.transcoding.minutes * pricing.transcoding_per_minute[req.media.transcoding.inputFormat];\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateQuantum(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.quantum[provider as keyof typeof this.pricing.quantum];\n    let totalCost = 0;\n\n    if (req.quantum.processingUnits > 0) {\n      const complexityMultiplier = pricing.algorithm_complexity[req.quantum.circuitComplexity];\n      totalCost += req.quantum.processingUnits * pricing.qpu_hour * complexityMultiplier;\n      totalCost += req.quantum.processingUnits * pricing.circuit_optimization;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateAdvancedAI(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.advancedAI[provider as keyof typeof this.pricing.advancedAI];\n    let totalCost = 0;\n\n    // Vector Database\n    if (req.advancedAI.vectorDatabase.dimensions > 0) {\n      totalCost += (req.advancedAI.vectorDatabase.dimensions / 1000000) * pricing.vector_db_per_million_dims;\n    }\n    if (req.advancedAI.vectorDatabase.queries > 0) {\n      totalCost += (req.advancedAI.vectorDatabase.queries / 1000000) * pricing.vector_queries_per_million;\n    }\n\n    // Custom Chips\n    totalCost += req.advancedAI.customChips.tpuHours * pricing.tpu_per_hour;\n    totalCost += req.advancedAI.customChips.inferenceChips * pricing.inference_chips_per_hour;\n\n    // Model Hosting\n    totalCost += req.advancedAI.modelHosting.models * pricing.model_hosting_per_model;\n    if (req.advancedAI.modelHosting.requests > 0) {\n      totalCost += (req.advancedAI.modelHosting.requests / 1000000) * pricing.inference_per_million_requests;\n    }\n\n    // RAG Pipelines\n    if (req.advancedAI.ragPipelines.documents > 0) {\n      totalCost += (req.advancedAI.ragPipelines.documents / 1000) * pricing.document_processing_per_1k;\n    }\n    if (req.advancedAI.ragPipelines.embeddings > 0) {\n      totalCost += (req.advancedAI.ragPipelines.embeddings / 1000000) * pricing.embeddings_per_million;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateEdge(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.edge[provider as keyof typeof this.pricing.edge];\n    let totalCost = 0;\n\n    totalCost += req.edge.edgeLocations * pricing.edge_location;\n    totalCost += req.edge.edgeCompute * pricing.edge_compute_per_hour;\n    totalCost += req.edge.fiveGNetworking.networkSlices * pricing[\"5g_network_slice\"];\n    totalCost += req.edge.fiveGNetworking.privateNetworks * pricing.private_5g_network;\n    \n    if (req.edge.realTimeProcessing > 0) {\n      totalCost += (req.edge.realTimeProcessing / 1000000) * pricing.realtime_events_per_million;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateConfidential(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.confidential[provider as keyof typeof this.pricing.confidential];\n    let totalCost = 0;\n\n    totalCost += req.confidential.secureEnclaves * pricing.secure_enclave_per_hour;\n    totalCost += req.confidential.trustedExecution * pricing.trusted_execution_per_hour;\n    \n    if (req.confidential.privacyPreservingAnalytics > 0) {\n      totalCost += (req.confidential.privacyPreservingAnalytics / 1000000) * pricing.privacy_operations_per_million;\n    }\n    \n    totalCost += req.confidential.zeroTrustProcessing * pricing.zero_trust_per_gb;\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateSustainability(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.sustainability[provider as keyof typeof this.pricing.sustainability];\n    let totalCost = 0;\n\n    if (req.sustainability.carbonFootprintTracking) {\n      totalCost += pricing.carbon_tracking;\n    }\n\n    if (req.sustainability.greenCloudOptimization) {\n      // This is a multiplier applied later, not a direct cost\n    }\n\n    totalCost += req.sustainability.carbonOffsetCredits * pricing.carbon_offset_per_ton;\n\n    return totalCost;\n  }\n\n  private calculateScenarios(provider: string, req: InfrastructureRequirements, regionMultiplier: number): number {\n    const pricing = this.pricing.scenarios[provider as keyof typeof this.pricing.scenarios];\n    let totalCost = 0;\n\n    // Disaster Recovery\n    if (req.scenarios.disasterRecovery.enabled) {\n      totalCost += pricing.disaster_recovery_base;\n      \n      const rtoMultiplier = pricing.dr_rto_multiplier[req.scenarios.disasterRecovery.rtoHours.toString() as keyof typeof pricing.dr_rto_multiplier] || 1.0;\n      const rpoMultiplier = pricing.dr_rpo_multiplier[req.scenarios.disasterRecovery.rpoMinutes.toString() as keyof typeof pricing.dr_rpo_multiplier] || 1.0;\n      \n      totalCost *= rtoMultiplier * rpoMultiplier;\n      totalCost += (req.scenarios.disasterRecovery.backupRegions - 1) * pricing.disaster_recovery_base * 0.5;\n    }\n\n    // Compliance\n    if (req.scenarios.compliance.frameworks.length > 0) {\n      req.scenarios.compliance.frameworks.forEach(framework => {\n        const premium = pricing.compliance_premiums[framework];\n        if (premium) {\n          totalCost += 1000 * premium; // Base monthly compliance cost\n        }\n      });\n    }\n\n    if (req.scenarios.compliance.auditLogging) {\n      totalCost += 100 * pricing.audit_logging_per_gb; // Assume 100GB logs per month\n    }\n\n    // Data residency premium\n    const residencyMultiplier = pricing.data_residency_premium[req.scenarios.compliance.dataResidency];\n    totalCost *= residencyMultiplier;\n\n    // Migration\n    if (req.scenarios.migration.dataToMigrate > 0) {\n      totalCost += pricing.migration_base_cost;\n      totalCost += req.scenarios.migration.dataToMigrate * pricing.migration_per_tb;\n      \n      const complexityMultiplier = pricing.complexity_multiplier[req.scenarios.migration.applicationComplexity];\n      totalCost *= complexityMultiplier;\n    }\n\n    return totalCost * regionMultiplier;\n  }\n\n  private calculateOptimizationMultiplier(provider: string, req: InfrastructureRequirements): number {\n    let multiplier = 1.0;\n\n    // Reserved instance savings\n    const reservedSavings = {\n      none: 1.0,\n      conservative: 0.95, // 5% savings\n      moderate: 0.88, // 12% savings\n      aggressive: 0.78 // 22% savings\n    };\n    multiplier *= reservedSavings[req.optimization.reservedInstanceStrategy];\n\n    // Spot instance savings\n    const spotSavings = req.optimization.spotInstanceTolerance / 100 * 0.7; // Up to 70% savings on spot portion\n    multiplier *= (1 - spotSavings);\n\n    // Auto-scaling optimization\n    const scalingSavings = {\n      minimal: 0.98, // 2% savings\n      moderate: 0.92, // 8% savings\n      aggressive: 0.85 // 15% savings\n    };\n    multiplier *= scalingSavings[req.optimization.autoScalingAggression];\n\n    return multiplier;\n  }\n\n  private getSustainabilityMultiplier(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.sustainability[provider as keyof typeof this.pricing.sustainability];\n    let multiplier = 1.0;\n\n    if (req.sustainability.renewableEnergyPreference) {\n      multiplier *= pricing.renewable_energy_premium;\n    }\n\n    if (req.sustainability.greenCloudOptimization) {\n      multiplier *= pricing.green_optimization;\n    }\n\n    return multiplier;\n  }\n\n  private calculateCarbonFootprint(provider: string, totalCost: number): number {\n    const pricing = this.pricing.sustainability[provider as keyof typeof this.pricing.sustainability];\n    \n    // Estimate power usage based on cost (approximate formula)\n    const estimatedKwh = totalCost * 100; // Rough estimate: $1 = 100 kWh\n    \n    return estimatedKwh * pricing.co2_per_kwh;\n  }\n\n  private getRenewableEnergyPercent(provider: string): number {\n    const pricing = this.pricing.sustainability[provider as keyof typeof this.pricing.sustainability];\n    return pricing.renewable_percent;\n  }\n\n  private calculateLicensing(requirements: InfrastructureRequirements): number {\n    let totalLicensingCost = 0;\n    const licensing = this.pricing.licensing;\n    const vcpus = requirements.compute.vcpus;\n\n    // Windows Server Licensing\n    if (requirements.licensing?.windows?.enabled) {\n      const licenses = requirements.licensing.windows.licenses;\n      const pricePerCore = licensing.windows.server_standard;\n      totalLicensingCost += licenses * pricePerCore * vcpus; // Per core licensing\n    }\n\n    // SQL Server Licensing\n    if (requirements.licensing?.sqlServer?.enabled) {\n      const licenses = requirements.licensing.sqlServer.licenses;\n      const edition = requirements.licensing.sqlServer.edition;\n      const pricePerCore = licensing.sqlServer[edition as keyof typeof licensing.sqlServer] as number;\n      totalLicensingCost += licenses * pricePerCore * vcpus; // Per core licensing\n    }\n\n    // Oracle Database Licensing\n    if (requirements.licensing?.oracle?.enabled) {\n      const licenses = requirements.licensing.oracle.licenses;\n      const edition = requirements.licensing.oracle.edition;\n      const pricePerCore = licensing.oracle[edition as keyof typeof licensing.oracle] as number;\n      totalLicensingCost += (licenses * pricePerCore * vcpus) / 12; // Annual to monthly\n    }\n\n    // VMware Licensing\n    if (requirements.licensing?.vmware?.enabled) {\n      const licenses = requirements.licensing.vmware.licenses;\n      const pricePerCpu = licensing.vmware.vsphere_standard;\n      const cpuSockets = Math.ceil(vcpus / 8); // Assume 8 cores per socket\n      totalLicensingCost += (licenses * pricePerCpu * cpuSockets) / 12; // Annual to monthly\n    }\n\n    // Red Hat Enterprise Linux\n    if (requirements.licensing?.redhat?.enabled) {\n      const licenses = requirements.licensing.redhat.licenses;\n      const pricePerSocket = licensing.redhat.enterprise_linux;\n      const cpuSockets = Math.ceil(vcpus / 8);\n      totalLicensingCost += (licenses * pricePerSocket * cpuSockets) / 12; // Annual to monthly\n    }\n\n    // SAP Licensing\n    if (requirements.licensing?.sap?.enabled) {\n      const licenses = requirements.licensing.sap.licenses;\n      const pricePerLicense = licensing.sap.hana_enterprise;\n      totalLicensingCost += (licenses * pricePerLicense) / 12; // Annual to monthly\n    }\n\n    // Microsoft Office 365\n    if (requirements.licensing?.microsoftOffice365?.enabled) {\n      const licenses = requirements.licensing.microsoftOffice365.licenses;\n      const pricePerUser = licensing.microsoftOffice365.business_premium;\n      totalLicensingCost += licenses * pricePerUser; // Monthly pricing\n    }\n\n    return totalLicensingCost;\n  }\n\n  private calculateMultiCloudOptimization(providers: CloudProvider[]): { cost: number; breakdown: Record<string, string> } {\n    // Find cheapest option for each service category including new services\n    const categories = ['compute', 'storage', 'database', 'networking', 'analytics', 'ai', 'security', 'monitoring', 'devops', 'backup', 'iot', 'media', 'quantum', 'advancedAI', 'edge', 'confidential', 'licensing'];\n    const breakdown: Record<string, string> = {};\n    let totalCost = 0;\n\n    categories.forEach(category => {\n      if (category === 'licensing') {\n        // Licensing is provider-independent, so use the first provider's value\n        breakdown[category] = 'All Providers';\n        totalCost += (providers[0][category as keyof CloudProvider] as number) || 0;\n      } else {\n        const cheapest = providers.reduce((min, p) => \n          (p[category as keyof CloudProvider] || 0) < (min[category as keyof CloudProvider] || 0) ? p : min\n        );\n        breakdown[category] = cheapest.name;\n        totalCost += (cheapest[category as keyof CloudProvider] as number) || 0;\n      }\n    });\n\n    return {\n      cost: Math.round(totalCost * 100) / 100,\n      breakdown\n    };\n  }\n}","size_bytes":31788},"server/utils/costCalculator.ts":{"content":"import { InfrastructureRequirements, CloudProvider, CostCalculationResult } from \"@shared/schema\";\nimport pricingData from \"../data/pricing.json\";\n\nexport class CostCalculator {\n  private pricing = pricingData;\n\n  calculateCosts(requirements: InfrastructureRequirements): CostCalculationResult {\n    const providers = ['aws', 'azure', 'gcp', 'oracle'] as const;\n    const results: CloudProvider[] = [];\n\n    // Calculate region multiplier\n    const regionMultiplier = this.pricing.regions[requirements.compute.region as keyof typeof this.pricing.regions]?.multiplier || 1.0;\n\n    for (const provider of providers) {\n      const compute = this.calculateCompute(provider, requirements) * regionMultiplier;\n      const storage = this.calculateStorage(provider, requirements);\n      const database = this.calculateDatabase(provider, requirements) * regionMultiplier;\n      const networking = this.calculateNetworking(provider, requirements);\n      \n      const total = compute + storage + database + networking;\n\n      results.push({\n        name: provider.toUpperCase(),\n        compute: Math.round(compute * 100) / 100,\n        storage: Math.round(storage * 100) / 100,\n        database: Math.round(database * 100) / 100,\n        networking: Math.round(networking * 100) / 100,\n        total: Math.round(total * 100) / 100,\n      });\n    }\n\n    // Sort by total cost\n    results.sort((a, b) => a.total - b.total);\n    \n    const cheapest = results[0];\n    const mostExpensive = results[results.length - 1];\n    const potentialSavings = Math.round((mostExpensive.total - cheapest.total) * 100) / 100;\n\n    // Calculate multi-cloud optimization\n    const multiCloudOption = this.calculateMultiCloudOptimization(results);\n\n    return {\n      providers: results,\n      cheapest,\n      mostExpensive,\n      potentialSavings,\n      multiCloudOption,\n      recommendations: {\n        singleCloud: `${cheapest.name} offers the best overall value at $${cheapest.total}/month with competitive pricing across all services`,\n        multiCloud: `Hybrid approach could save an additional $${Math.round((cheapest.total - multiCloudOption.cost) * 100) / 100}/month by optimizing service placement`\n      }\n    };\n  }\n\n  private calculateCompute(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.compute[provider as keyof typeof this.pricing.compute];\n    const instancePricing = pricing[req.compute.instanceType];\n    \n    const vcpuCost = req.compute.vcpus * instancePricing.vcpu * 24 * 30;\n    const ramCost = req.compute.ram * instancePricing.ram * 24 * 30;\n    \n    return vcpuCost + ramCost;\n  }\n\n  private calculateStorage(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.storage[provider as keyof typeof this.pricing.storage];\n    return req.storage.size * pricing[req.storage.type];\n  }\n\n  private calculateDatabase(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.database[provider as keyof typeof this.pricing.database];\n    return req.database.size * pricing[req.database.engine];\n  }\n\n  private calculateNetworking(provider: string, req: InfrastructureRequirements): number {\n    const pricing = this.pricing.networking[provider as keyof typeof this.pricing.networking];\n    const bandwidthCost = req.networking.bandwidth * pricing.bandwidth;\n    const loadBalancerCost = pricing.load_balancer[req.networking.loadBalancer];\n    \n    return bandwidthCost + loadBalancerCost;\n  }\n\n  private calculateMultiCloudOptimization(providers: CloudProvider[]): { cost: number; breakdown: Record<string, string> } {\n    // Find cheapest option for each service\n    const cheapestCompute = providers.reduce((min, p) => p.compute < min.compute ? p : min);\n    const cheapestStorage = providers.reduce((min, p) => p.storage < min.storage ? p : min);\n    const cheapestDatabase = providers.reduce((min, p) => p.database < min.database ? p : min);\n    const cheapestNetworking = providers.reduce((min, p) => p.networking < min.networking ? p : min);\n\n    const totalCost = cheapestCompute.compute + cheapestStorage.storage + \n                     cheapestDatabase.database + cheapestNetworking.networking;\n\n    return {\n      cost: Math.round(totalCost * 100) / 100,\n      breakdown: {\n        compute: cheapestCompute.name,\n        storage: cheapestStorage.name,\n        database: cheapestDatabase.name,\n        networking: cheapestNetworking.name\n      }\n    };\n  }\n}\n","size_bytes":4482},"client/src/components/comprehensive-cost-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { infrastructureRequirementsSchema, type InfrastructureRequirements } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ComprehensiveCostForm() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<InfrastructureRequirements>({\n    resolver: zodResolver(infrastructureRequirementsSchema),\n    defaultValues: {\n      currency: \"USD\",\n      licensing: {\n        windows: { enabled: false, licenses: 0 },\n        sqlServer: { enabled: false, edition: \"standard\", licenses: 0 },\n        oracle: { enabled: false, edition: \"standard\", licenses: 0 },\n        vmware: { enabled: false, licenses: 0 },\n        redhat: { enabled: false, licenses: 0 },\n        sap: { enabled: false, licenses: 0 },\n        microsoftOffice365: { enabled: false, licenses: 0 },\n      },\n      compute: {\n        vcpus: 8,\n        ram: 16,\n        instanceType: \"general-purpose\",\n        region: \"us-east-1\",\n        operatingSystem: \"linux\",\n        bootVolume: {\n          size: 30,\n          type: \"ssd-gp3\",\n          iops: 3000,\n        },\n        serverless: {\n          functions: 0,\n          executionTime: 1,\n        },\n      },\n      storage: {\n        objectStorage: {\n          size: 0,\n          tier: \"standard\",\n          requests: 0,\n        },\n        blockStorage: {\n          size: 0,\n          type: \"ssd-gp3\",\n          iops: 3000,\n        },\n        fileStorage: {\n          size: 0,\n          performanceMode: \"general-purpose\",\n        },\n      },\n      database: {\n        relational: {\n          engine: \"mysql\",\n          instanceClass: \"small\",\n          storage: 0,\n          multiAZ: false,\n        },\n        nosql: {\n          engine: \"none\",\n          readCapacity: 0,\n          writeCapacity: 0,\n          storage: 0,\n        },\n        cache: {\n          engine: \"none\",\n          instanceClass: \"small\",\n          nodes: 0,\n        },\n        dataWarehouse: {\n          nodes: 0,\n          nodeType: \"small\",\n          storage: 0,\n        },\n      },\n      networking: {\n        bandwidth: 1000,\n        loadBalancer: \"none\",\n        cdn: {\n          enabled: false,\n          requests: 0,\n          dataTransfer: 0,\n        },\n        dns: {\n          hostedZones: 0,\n          queries: 0,\n        },\n        vpn: {\n          connections: 0,\n          hours: 0,\n        },\n      },\n      analytics: {\n        dataProcessing: {\n          hours: 0,\n          nodeType: \"small\",\n        },\n        streaming: {\n          shards: 0,\n          records: 0,\n        },\n        businessIntelligence: {\n          users: 0,\n          queries: 0,\n        },\n      },\n      ai: {\n        training: {\n          hours: 0,\n          instanceType: \"cpu\",\n        },\n        inference: {\n          requests: 0,\n          instanceType: \"cpu\",\n        },\n        prebuilt: {\n          imageAnalysis: 0,\n          textProcessing: 0,\n          speechServices: 0,\n        },\n      },\n      security: {\n        webFirewall: {\n          enabled: false,\n          requests: 0,\n        },\n        identityManagement: {\n          users: 0,\n          authentications: 0,\n        },\n        keyManagement: {\n          keys: 0,\n          operations: 0,\n        },\n        threatDetection: {\n          enabled: false,\n          events: 0,\n        },\n      },\n      monitoring: {\n        metrics: 0,\n        logs: 0,\n        traces: 0,\n        alerts: 0,\n      },\n      devops: {\n        cicd: {\n          buildMinutes: 0,\n          parallelJobs: 0,\n        },\n        containerRegistry: {\n          storage: 0,\n          pulls: 0,\n        },\n        apiManagement: {\n          requests: 0,\n          endpoints: 0,\n        },\n      },\n      backup: {\n        storage: 0,\n        frequency: \"daily\",\n        retention: 30,\n      },\n      iot: {\n        devices: 0,\n        messages: 0,\n        dataProcessing: 0,\n        edgeLocations: 0,\n      },\n      media: {\n        videoStreaming: {\n          hours: 0,\n          quality: \"1080p\",\n        },\n        transcoding: {\n          minutes: 0,\n          inputFormat: \"standard\",\n        },\n      },\n      // New advanced services\n      quantum: {\n        processingUnits: 0,\n        quantumAlgorithms: \"optimization\",\n        circuitComplexity: \"basic\",\n      },\n      advancedAI: {\n        vectorDatabase: {\n          dimensions: 0,\n          queries: 0,\n        },\n        customChips: {\n          tpuHours: 0,\n          inferenceChips: 0,\n        },\n        modelHosting: {\n          models: 0,\n          requests: 0,\n        },\n        ragPipelines: {\n          documents: 0,\n          embeddings: 0,\n        },\n      },\n      edge: {\n        edgeLocations: 0,\n        edgeCompute: 0,\n        fiveGNetworking: {\n          networkSlices: 0,\n          privateNetworks: 0,\n        },\n        realTimeProcessing: 0,\n      },\n      confidential: {\n        secureEnclaves: 0,\n        trustedExecution: 0,\n        privacyPreservingAnalytics: 0,\n        zeroTrustProcessing: 0,\n      },\n      sustainability: {\n        carbonFootprintTracking: false,\n        renewableEnergyPreference: false,\n        greenCloudOptimization: false,\n        carbonOffsetCredits: 0,\n      },\n      scenarios: {\n        disasterRecovery: {\n          enabled: false,\n          rtoHours: 24,\n          rpoMinutes: 240,\n          backupRegions: 1,\n        },\n        compliance: {\n          frameworks: [],\n          auditLogging: false,\n          dataResidency: \"global\",\n        },\n        migration: {\n          dataToMigrate: 0,\n          applicationComplexity: \"moderate\",\n        },\n      },\n      optimization: {\n        reservedInstanceStrategy: \"moderate\",\n        spotInstanceTolerance: 10,\n        autoScalingAggression: \"moderate\",\n        costAlerts: {\n          enabled: true,\n          thresholdPercent: 20,\n          notificationPreference: \"email\",\n        },\n      },\n    },\n  });\n\n  const calculateMutation = useMutation({\n    mutationFn: async (data: InfrastructureRequirements) => {\n      const response = await apiRequest(\"POST\", \"/api/calculate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Cost analysis completed\",\n        description: \"Redirecting to results...\",\n      });\n      setLocation(`/results/${data.analysisId}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Calculation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InfrastructureRequirements) => {\n    calculateMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <Card className=\"shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold text-slate-900\">\n            Comprehensive Cloud Infrastructure Analysis\n          </CardTitle>\n          <CardDescription>\n            Configure your complete cloud infrastructure requirements across all service categories to get accurate cost estimates from all major providers.\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <Tabs defaultValue=\"compute\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-6 md:grid-cols-11\">\n                  <TabsTrigger value=\"currency\">Currency</TabsTrigger>\n                  <TabsTrigger value=\"licensing\">Licensing</TabsTrigger>\n                  <TabsTrigger value=\"compute\">Compute</TabsTrigger>\n                  <TabsTrigger value=\"serverless\">Serverless</TabsTrigger>\n                  <TabsTrigger value=\"storage\">Storage</TabsTrigger>\n                  <TabsTrigger value=\"database\">Database</TabsTrigger>\n                  <TabsTrigger value=\"networking\">Network</TabsTrigger>\n                  <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n                  <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\n                  <TabsTrigger value=\"quantum\">Quantum/AI</TabsTrigger>\n                  <TabsTrigger value=\"optimization\">Settings</TabsTrigger>\n                </TabsList>\n\n                {/* Currency Tab */}\n                <TabsContent value=\"currency\" className=\"space-y-6\">\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-md font-semibold\">Currency Selection</h4>\n                    <p className=\"text-sm text-slate-600\">Choose your preferred currency for cost calculations and reporting</p>\n                  </div>\n                  <FormField\n                    control={form.control}\n                    name=\"currency\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Currency</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select currency\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"USD\">USD ($) - US Dollar</SelectItem>\n                            <SelectItem value=\"INR\">INR (₹) - Indian Rupee</SelectItem>\n                            <SelectItem value=\"EUR\">EUR (€) - Euro</SelectItem>\n                            <SelectItem value=\"KWD\">KWD (د.ك) - Kuwaiti Dinar</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                    <h5 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Currency Exchange Information</h5>\n                    <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                      <li>• Exchange rates are updated regularly based on market values</li>\n                      <li>• All cloud provider costs are converted from USD base pricing</li>\n                      <li>• Licensing costs are also converted to your selected currency</li>\n                      <li>• Results show currency symbol with converted amounts</li>\n                    </ul>\n                  </div>\n                </TabsContent>\n\n                {/* Licensing Tab */}\n                <TabsContent value=\"licensing\" className=\"space-y-6\">\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-md font-semibold\">Software Licensing Costs</h4>\n                    <p className=\"text-sm text-slate-600\">Configure software licenses that will run on your cloud infrastructure</p>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    {/* Windows Server */}\n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center space-x-2 mb-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"licensing.windows.enabled\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel className=\"font-medium\">\n                                  Windows Server Standard\n                                </FormLabel>\n                                <FormDescription>\n                                  Core-based licensing for Windows Server\n                                </FormDescription>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      {form.watch(\"licensing.windows.enabled\") && (\n                        <FormField\n                          control={form.control}\n                          name=\"licensing.windows.licenses\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Number of Licenses</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"0\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n                    </div>\n\n                    {/* SQL Server */}\n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center space-x-2 mb-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"licensing.sqlServer.enabled\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel className=\"font-medium\">\n                                  Microsoft SQL Server\n                                </FormLabel>\n                                <FormDescription>\n                                  Core-based database licensing\n                                </FormDescription>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      {form.watch(\"licensing.sqlServer.enabled\") && (\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"licensing.sqlServer.edition\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Edition</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select edition\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"express\">Express (Free)</SelectItem>\n                                    <SelectItem value=\"standard\">Standard</SelectItem>\n                                    <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"licensing.sqlServer.licenses\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Number of Licenses</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    placeholder=\"0\"\n                                    {...field}\n                                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Microsoft Office 365 */}\n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center space-x-2 mb-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"licensing.microsoftOffice365.enabled\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel className=\"font-medium\">\n                                  Microsoft Office 365\n                                </FormLabel>\n                                <FormDescription>\n                                  Per-user monthly subscription\n                                </FormDescription>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      {form.watch(\"licensing.microsoftOffice365.enabled\") && (\n                        <FormField\n                          control={form.control}\n                          name=\"licensing.microsoftOffice365.licenses\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Number of Users</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"0\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"bg-amber-50 dark:bg-amber-900/20 p-4 rounded-lg\">\n                    <h5 className=\"font-medium text-amber-900 dark:text-amber-100 mb-2\">Licensing Cost Information</h5>\n                    <ul className=\"text-sm text-amber-800 dark:text-amber-200 space-y-1\">\n                      <li>• Costs are calculated based on your CPU/core configuration</li>\n                      <li>• Annual licenses are converted to monthly costs for comparison</li>\n                      <li>• Licensing costs apply across all cloud providers</li>\n                      <li>• Contact vendors for volume discounts and enterprise agreements</li>\n                    </ul>\n                  </div>\n                </TabsContent>\n\n                {/* Compute Tab */}\n                <TabsContent value=\"compute\" className=\"space-y-6\">\n                  <div className=\"mb-4\">\n                    <h4 className=\"text-md font-semibold\">Traditional Compute Resources</h4>\n                    <p className=\"text-sm text-slate-600\">Configure virtual machines, containers, and dedicated instances with boot volume storage</p>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"compute.vcpus\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>vCPUs</FormLabel>\n                          <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={String(field.value)}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select vCPUs\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"2\">2 vCPUs</SelectItem>\n                              <SelectItem value=\"4\">4 vCPUs</SelectItem>\n                              <SelectItem value=\"8\">8 vCPUs</SelectItem>\n                              <SelectItem value=\"16\">16 vCPUs</SelectItem>\n                              <SelectItem value=\"32\">32 vCPUs</SelectItem>\n                              <SelectItem value=\"64\">64 vCPUs</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"compute.ram\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>RAM (GB)</FormLabel>\n                          <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={String(field.value)}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select RAM\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"4\">4 GB</SelectItem>\n                              <SelectItem value=\"8\">8 GB</SelectItem>\n                              <SelectItem value=\"16\">16 GB</SelectItem>\n                              <SelectItem value=\"32\">32 GB</SelectItem>\n                              <SelectItem value=\"64\">64 GB</SelectItem>\n                              <SelectItem value=\"128\">128 GB</SelectItem>\n                              <SelectItem value=\"256\">256 GB</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"compute.instanceType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Instance Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select instance type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"general-purpose\">General Purpose</SelectItem>\n                              <SelectItem value=\"compute-optimized\">Compute Optimized</SelectItem>\n                              <SelectItem value=\"memory-optimized\">Memory Optimized</SelectItem>\n                              <SelectItem value=\"storage-optimized\">Storage Optimized</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"compute.operatingSystem\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Operating System</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select OS\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"linux\">Linux</SelectItem>\n                              <SelectItem value=\"windows\">Windows</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"compute.region\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Region</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select region\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"us-east-1\">US East (N. Virginia)</SelectItem>\n                              <SelectItem value=\"us-west-2\">US West (Oregon)</SelectItem>\n                              <SelectItem value=\"eu-west-1\">Europe (Ireland)</SelectItem>\n                              <SelectItem value=\"eu-central-1\">Europe (Frankfurt)</SelectItem>\n                              <SelectItem value=\"ap-southeast-1\">Asia Pacific (Singapore)</SelectItem>\n                              <SelectItem value=\"ap-northeast-1\">Asia Pacific (Tokyo)</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Boot Volume Configuration */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Boot Volume Storage</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"compute.bootVolume.size\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Boot Volume Size (GB)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"30\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 30)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"compute.bootVolume.type\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Volume Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select volume type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"ssd-gp3\">SSD GP3 (General Purpose)</SelectItem>\n                                <SelectItem value=\"ssd-gp2\">SSD GP2 (Previous Gen)</SelectItem>\n                                <SelectItem value=\"ssd-io2\">SSD IO2 (High IOPS)</SelectItem>\n                                <SelectItem value=\"hdd-standard\">HDD Standard</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"compute.bootVolume.iops\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>IOPS (for IO2)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"3000\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 3000)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n\n                </TabsContent>\n\n                {/* Serverless Tab */}\n                <TabsContent value=\"serverless\" className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Serverless Functions Configuration</h4>\n                    <p className=\"text-sm text-slate-600\">Configure serverless functions across all cloud providers (AWS Lambda, Azure Functions, Google Cloud Functions, Oracle Functions)</p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"compute.serverless.functions\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Function Invocations (per month)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"compute.serverless.executionTime\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Avg. Execution Time (minutes)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                step=\"0.1\"\n                                placeholder=\"1\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 1)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                    <h5 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">Serverless Cost Factors</h5>\n                    <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                      <li>• Charges based on function invocations and execution time</li>\n                      <li>• Memory allocation affects pricing (1GB default)</li>\n                      <li>• Free tier includes 1M requests and 400,000 GB-seconds</li>\n                      <li>• Cold start times vary by provider and runtime</li>\n                    </ul>\n                  </div>\n                </TabsContent>\n\n                {/* Storage Tab */}\n                <TabsContent value=\"storage\" className=\"space-y-6\">\n                  {/* Object Storage */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Object Storage (S3/Blob)</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"storage.objectStorage.size\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Storage Size (GB)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"storage.objectStorage.tier\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Storage Tier</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select tier\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"standard\">Standard</SelectItem>\n                                <SelectItem value=\"infrequent-access\">Infrequent Access</SelectItem>\n                                <SelectItem value=\"glacier\">Glacier</SelectItem>\n                                <SelectItem value=\"deep-archive\">Deep Archive</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"storage.objectStorage.requests\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>API Requests (per month)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"10000\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Block Storage */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Block Storage (EBS/Disk)</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"storage.blockStorage.size\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Storage Size (GB)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"storage.blockStorage.type\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Storage Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"ssd-gp3\">SSD (GP3)</SelectItem>\n                                <SelectItem value=\"ssd-io2\">SSD (IO2)</SelectItem>\n                                <SelectItem value=\"hdd-st1\">HDD (ST1)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"storage.blockStorage.iops\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>IOPS</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"3000\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 3000)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* File Storage */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">File Storage (EFS/File Share)</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"storage.fileStorage.size\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Storage Size (GB)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"storage.fileStorage.performanceMode\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Performance Mode</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select mode\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"general-purpose\">General Purpose</SelectItem>\n                                <SelectItem value=\"max-io\">Max I/O</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n\n                {/* Database Tab */}\n                <TabsContent value=\"database\" className=\"space-y-6\">\n                  {/* Relational Database */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Relational Database (RDS/SQL Database)</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"database.relational.engine\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Database Engine</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select engine\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"mysql\">MySQL</SelectItem>\n                                <SelectItem value=\"postgresql\">PostgreSQL</SelectItem>\n                                <SelectItem value=\"oracle\">Oracle</SelectItem>\n                                <SelectItem value=\"sql-server\">SQL Server</SelectItem>\n                                <SelectItem value=\"mariadb\">MariaDB</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"database.relational.instanceClass\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Instance Class</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select class\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"micro\">Micro</SelectItem>\n                                <SelectItem value=\"small\">Small</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"large\">Large</SelectItem>\n                                <SelectItem value=\"xlarge\">Extra Large</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"database.relational.storage\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Storage Size (GB)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"database.relational.multiAZ\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Multi-AZ Deployment</FormLabel>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Enable for high availability\n                              </div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n\n                {/* Networking Tab */}\n                <TabsContent value=\"networking\" className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"networking.bandwidth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Data Transfer (GB/month)</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"1000\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 1000)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"networking.loadBalancer\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Load Balancer</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select load balancer\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"none\">None</SelectItem>\n                              <SelectItem value=\"application\">Application Load Balancer</SelectItem>\n                              <SelectItem value=\"network\">Network Load Balancer</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* CDN Section */}\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"networking.cdn.enabled\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Content Delivery Network (CDN)</FormLabel>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Enable global content distribution\n                            </div>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    {form.watch(\"networking.cdn.enabled\") && (\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"networking.cdn.requests\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>CDN Requests (per month)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"0\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"networking.cdn.dataTransfer\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>CDN Data Transfer (GB/month)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"0\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n\n                {/* Analytics Tab */}\n                <TabsContent value=\"analytics\" className=\"space-y-6\">\n                  {/* Data Processing */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Data Processing (EMR/HDInsight/Dataproc)</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"analytics.dataProcessing.hours\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Cluster Hours (per month)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"analytics.dataProcessing.nodeType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Node Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select node type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"small\">Small</SelectItem>\n                                <SelectItem value=\"medium\">Medium</SelectItem>\n                                <SelectItem value=\"large\">Large</SelectItem>\n                                <SelectItem value=\"xlarge\">Extra Large</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Stream Processing */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Stream Processing (Kinesis/Event Hubs)</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"analytics.streaming.shards\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Number of Shards</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"analytics.streaming.records\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Records (per month)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n\n                {/* Advanced Services Tab */}\n                <TabsContent value=\"advanced\" className=\"space-y-6\">\n                  {/* AI/ML Services */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">AI/ML Services</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"ai.training.hours\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Model Training Hours</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"ai.inference.requests\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Inference Requests (per month)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Security Services */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Security Services</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"security.identityManagement.users\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Identity Management Users</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"security.keyManagement.keys\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Managed Keys</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Monitoring & DevOps */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Monitoring & DevOps</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"monitoring.metrics\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Custom Metrics</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"devops.cicd.buildMinutes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>CI/CD Build Minutes (per month)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Backup & IoT */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Backup & IoT</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"backup.storage\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Backup Storage (GB)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"iot.devices\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>IoT Devices</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n\n                {/* New Quantum/AI Tab */}\n                <TabsContent value=\"quantum\" className=\"space-y-6\">\n                  {/* Quantum Computing */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Quantum Computing Services</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"quantum.processingUnits\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>QPU Hours per Month</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"quantum.quantumAlgorithms\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Algorithm Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"optimization\">Optimization</SelectItem>\n                                <SelectItem value=\"simulation\">Simulation</SelectItem>\n                                <SelectItem value=\"cryptography\">Cryptography</SelectItem>\n                                <SelectItem value=\"ml\">Machine Learning</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"quantum.circuitComplexity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Circuit Complexity</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"basic\">Basic</SelectItem>\n                                <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                                <SelectItem value=\"advanced\">Advanced</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Advanced AI/ML Platform */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Advanced AI/ML Platform Services</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"advancedAI.vectorDatabase.dimensions\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Vector Database Dimensions</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"advancedAI.vectorDatabase.queries\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Vector Queries per Month</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"advancedAI.customChips.tpuHours\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>TPU Hours per Month</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"advancedAI.modelHosting.models\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Models Hosted</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Edge Computing & 5G */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Edge Computing & 5G Services</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"edge.edgeLocations\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Edge Locations</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"edge.edgeCompute\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Edge Compute Hours</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"edge.fiveGNetworking.networkSlices\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>5G Network Slices</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"confidential.secureEnclaves\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Secure Enclave Hours</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n\n                {/* Optimization & Settings Tab */}\n                <TabsContent value=\"optimization\" className=\"space-y-6\">\n                  {/* Cost Optimization Settings */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Cost Optimization Preferences</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"optimization.reservedInstanceStrategy\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Reserved Instance Strategy</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"none\">None</SelectItem>\n                                <SelectItem value=\"conservative\">Conservative (5% savings)</SelectItem>\n                                <SelectItem value=\"moderate\">Moderate (12% savings)</SelectItem>\n                                <SelectItem value=\"aggressive\">Aggressive (22% savings)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"optimization.spotInstanceTolerance\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Spot Instance Tolerance (%)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"10\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"optimization.autoScalingAggression\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Auto-scaling Strategy</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"minimal\">Minimal (2% savings)</SelectItem>\n                                <SelectItem value=\"moderate\">Moderate (8% savings)</SelectItem>\n                                <SelectItem value=\"aggressive\">Aggressive (15% savings)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Sustainability Settings */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Sustainability & Green Computing</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"sustainability.carbonFootprintTracking\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Carbon Footprint Tracking</FormLabel>\n                              <div className=\"text-sm text-gray-500\">Monitor CO2 emissions from your cloud usage</div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"sustainability.renewableEnergyPreference\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Prefer Renewable Energy</FormLabel>\n                              <div className=\"text-sm text-gray-500\">Choose providers with higher renewable energy %</div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"sustainability.greenCloudOptimization\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Green Cloud Optimization</FormLabel>\n                              <div className=\"text-sm text-gray-500\">Optimize for environmental impact</div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"sustainability.carbonOffsetCredits\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Carbon Offset Credits (tons CO2)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Advanced Scenarios */}\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-md font-semibold\">Advanced Scenarios</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"scenarios.disasterRecovery.enabled\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Disaster Recovery</FormLabel>\n                              <div className=\"text-sm text-gray-500\">Enable multi-region backup and recovery</div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"scenarios.compliance.dataResidency\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Data Residency Requirements</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"global\">Global</SelectItem>\n                                <SelectItem value=\"us\">United States</SelectItem>\n                                <SelectItem value=\"eu\">European Union</SelectItem>\n                                <SelectItem value=\"asia\">Asia Pacific</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"scenarios.migration.dataToMigrate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Data to Migrate (TB)</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                placeholder=\"0\"\n                                {...field}\n                                onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"scenarios.migration.applicationComplexity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Migration Complexity</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"simple\">Simple</SelectItem>\n                                <SelectItem value=\"moderate\">Moderate</SelectItem>\n                                <SelectItem value=\"complex\">Complex</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex justify-between pt-6 border-t\">\n                <Button type=\"button\" variant=\"outline\">\n                  Save Configuration\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"bg-primary hover:bg-blue-700\"\n                  disabled={calculateMutation.isPending}\n                >\n                  {calculateMutation.isPending ? \"Analyzing...\" : \"Calculate Comprehensive Costs\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":89172},"client/src/components/cost-charts.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CloudProvider } from \"@shared/schema\";\nimport { ChartData } from \"@/lib/types\";\n\ndeclare global {\n  interface Window {\n    Chart: any;\n  }\n}\n\ninterface CostChartsProps {\n  providers: CloudProvider[];\n  cheapestProvider: CloudProvider;\n}\n\nexport default function CostCharts({ providers, cheapestProvider }: CostChartsProps) {\n  const costChartRef = useRef<HTMLCanvasElement>(null);\n  const breakdownChartRef = useRef<HTMLCanvasElement>(null);\n  const sustainabilityChartRef = useRef<HTMLCanvasElement>(null);\n  const serviceComparisonRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && window.Chart) {\n      initCostChart();\n      initBreakdownChart();\n      initSustainabilityChart();\n      initServiceComparisonChart();\n    } else {\n      // Load Chart.js if not already loaded\n      const script = document.createElement(\"script\");\n      script.src = \"https://cdn.jsdelivr.net/npm/chart.js\";\n      script.onload = () => {\n        initCostChart();\n        initBreakdownChart();\n        initSustainabilityChart();\n        initServiceComparisonChart();\n      };\n      document.head.appendChild(script);\n    }\n  }, [providers, cheapestProvider]);\n\n  const initCostChart = () => {\n    if (!costChartRef.current || !window.Chart) return;\n\n    const ctx = costChartRef.current.getContext('2d');\n    if (!ctx) return;\n\n    // Destroy existing chart if it exists\n    const existingChart = window.Chart.getChart(costChartRef.current);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n\n    new window.Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: providers.map(p => p.name),\n        datasets: [{\n          label: 'Monthly Cost ($)',\n          data: providers.map(p => p.total),\n          backgroundColor: [\n            '#FF9F43',\n            '#0078D4',\n            '#4285F4',\n            '#F80000'\n          ],\n          borderColor: [\n            '#FF7F00',\n            '#106EBE',\n            '#1E6DE5',\n            '#C80000'\n          ],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            ticks: {\n              callback: function(value: any) {\n                return '$' + value;\n              }\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    });\n  };\n\n  const initBreakdownChart = () => {\n    if (!breakdownChartRef.current || !window.Chart) return;\n\n    const ctx = breakdownChartRef.current.getContext('2d');\n    if (!ctx) return;\n\n    // Destroy existing chart if it exists\n    const existingChart = window.Chart.getChart(breakdownChartRef.current);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n\n    // Build comprehensive service categories data\n    const labels = [];\n    const data = [];\n    const colors = [\n      '#2563EB', // Compute - Blue\n      '#10B981', // Storage - Green  \n      '#F59E0B', // Database - Amber\n      '#EF4444', // Networking - Red\n      '#8B5CF6', // Analytics - Purple\n      '#06B6D4', // AI/ML - Cyan\n      '#EC4899', // Security - Pink\n      '#84CC16', // Monitoring - Lime\n      '#F97316', // DevOps - Orange\n      '#6366F1', // Backup - Indigo\n      '#14B8A6', // IoT - Teal\n      '#F59E0B'  // Media - Amber variant\n    ];\n\n    // Add core services\n    if (cheapestProvider.compute > 0) {\n      labels.push('Compute');\n      data.push(cheapestProvider.compute);\n    }\n    if (cheapestProvider.storage > 0) {\n      labels.push('Storage');\n      data.push(cheapestProvider.storage);\n    }\n    if (cheapestProvider.database > 0) {\n      labels.push('Database');\n      data.push(cheapestProvider.database);\n    }\n    if (cheapestProvider.networking > 0) {\n      labels.push('Networking');\n      data.push(cheapestProvider.networking);\n    }\n\n    // Add comprehensive services if they exist and have costs > 0\n    if (cheapestProvider.analytics && cheapestProvider.analytics > 0) {\n      labels.push('Analytics');\n      data.push(cheapestProvider.analytics);\n    }\n    if (cheapestProvider.ai && cheapestProvider.ai > 0) {\n      labels.push('AI/ML');\n      data.push(cheapestProvider.ai);\n    }\n    if (cheapestProvider.security && cheapestProvider.security > 0) {\n      labels.push('Security');\n      data.push(cheapestProvider.security);\n    }\n    if (cheapestProvider.monitoring && cheapestProvider.monitoring > 0) {\n      labels.push('Monitoring');\n      data.push(cheapestProvider.monitoring);\n    }\n    if (cheapestProvider.devops && cheapestProvider.devops > 0) {\n      labels.push('DevOps');\n      data.push(cheapestProvider.devops);\n    }\n    if (cheapestProvider.backup && cheapestProvider.backup > 0) {\n      labels.push('Backup');\n      data.push(cheapestProvider.backup);\n    }\n    if (cheapestProvider.iot && cheapestProvider.iot > 0) {\n      labels.push('IoT');\n      data.push(cheapestProvider.iot);\n    }\n    if (cheapestProvider.media && cheapestProvider.media > 0) {\n      labels.push('Media');\n      data.push(cheapestProvider.media);\n    }\n\n    // Add advanced 2025 services if they exist and have costs > 0\n    if (cheapestProvider.quantum && cheapestProvider.quantum > 0) {\n      labels.push('Quantum');\n      data.push(cheapestProvider.quantum);\n    }\n    if (cheapestProvider.advancedAI && cheapestProvider.advancedAI > 0) {\n      labels.push('Advanced AI');\n      data.push(cheapestProvider.advancedAI);\n    }\n    if (cheapestProvider.edge && cheapestProvider.edge > 0) {\n      labels.push('Edge & 5G');\n      data.push(cheapestProvider.edge);\n    }\n    if (cheapestProvider.confidential && cheapestProvider.confidential > 0) {\n      labels.push('Confidential');\n      data.push(cheapestProvider.confidential);\n    }\n    if (cheapestProvider.sustainability && cheapestProvider.sustainability > 0) {\n      labels.push('Sustainability');\n      data.push(cheapestProvider.sustainability);\n    }\n    if (cheapestProvider.scenarios && cheapestProvider.scenarios > 0) {\n      labels.push('Scenarios');\n      data.push(cheapestProvider.scenarios);\n    }\n\n    new window.Chart(ctx, {\n      type: 'doughnut',\n      data: {\n        labels,\n        datasets: [{\n          data,\n          backgroundColor: colors.slice(0, labels.length),\n          borderWidth: 2,\n          borderColor: '#FFFFFF'\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'bottom' as const,\n            labels: {\n              padding: 15,\n              font: {\n                size: 11\n              }\n            }\n          },\n          tooltip: {\n            callbacks: {\n              label: function(context: any) {\n                const label = context.label || '';\n                const value = context.parsed;\n                const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\n                const percentage = ((value / total) * 100).toFixed(1);\n                return `${label}: $${value}/mo (${percentage}%)`;\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n\n  const initSustainabilityChart = () => {\n    if (!sustainabilityChartRef.current || !window.Chart) return;\n    \n    const ctx = sustainabilityChartRef.current.getContext('2d');\n    if (!ctx) return;\n\n    // Destroy existing chart if it exists\n    const existingChart = window.Chart.getChart(sustainabilityChartRef.current);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n\n    // Check if providers have sustainability data\n    const hasRenewableData = providers.some(p => p.renewableEnergyPercent !== undefined);\n    const hasCarbonData = providers.some(p => p.carbonFootprint !== undefined);\n    \n    if (!hasRenewableData && !hasCarbonData) return;\n\n    const datasets = [];\n    \n    if (hasRenewableData) {\n      datasets.push({\n        label: 'Renewable Energy %',\n        data: providers.map(p => p.renewableEnergyPercent || 0),\n        backgroundColor: 'rgba(34, 197, 94, 0.6)',\n        borderColor: 'rgb(34, 197, 94)',\n        borderWidth: 2,\n        yAxisID: 'y'\n      });\n    }\n\n    if (hasCarbonData) {\n      datasets.push({\n        label: 'Carbon Footprint (tons CO2/mo)',\n        data: providers.map(p => p.carbonFootprint || 0),\n        backgroundColor: 'rgba(239, 68, 68, 0.6)',\n        borderColor: 'rgb(239, 68, 68)',\n        borderWidth: 2,\n        yAxisID: 'y1'\n      });\n    }\n\n    new window.Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: providers.map(p => p.name),\n        datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        interaction: {\n          mode: 'index' as const,\n          intersect: false,\n        },\n        scales: {\n          y: {\n            type: 'linear' as const,\n            display: hasRenewableData,\n            position: 'left' as const,\n            max: 100,\n            title: {\n              display: true,\n              text: 'Renewable Energy %'\n            }\n          },\n          y1: {\n            type: 'linear' as const,\n            display: hasCarbonData,\n            position: 'right' as const,\n            grid: {\n              drawOnChartArea: false,\n            },\n            title: {\n              display: true,\n              text: 'CO2 Emissions'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top' as const\n          }\n        }\n      }\n    });\n  };\n\n  const initServiceComparisonChart = () => {\n    if (!serviceComparisonRef.current || !window.Chart) return;\n    \n    const ctx = serviceComparisonRef.current.getContext('2d');\n    if (!ctx) return;\n\n    // Destroy existing chart if it exists\n    const existingChart = window.Chart.getChart(serviceComparisonRef.current);\n    if (existingChart) {\n      existingChart.destroy();\n    }\n\n    // Define all service categories with their display names\n    const serviceCategories = [\n      { key: 'compute', name: 'Compute' },\n      { key: 'storage', name: 'Storage' },\n      { key: 'database', name: 'Database' },\n      { key: 'networking', name: 'Networking' },\n      { key: 'analytics', name: 'Analytics' },\n      { key: 'ai', name: 'AI/ML' },\n      { key: 'quantum', name: 'Quantum' },\n      { key: 'advancedAI', name: 'Adv AI' },\n      { key: 'edge', name: 'Edge/5G' },\n      { key: 'confidential', name: 'Confidential' },\n      { key: 'security', name: 'Security' },\n      { key: 'monitoring', name: 'Monitoring' },\n      { key: 'devops', name: 'DevOps' },\n      { key: 'backup', name: 'Backup' }\n    ];\n\n    // Filter to only show categories that have non-zero costs\n    const activeServices = serviceCategories.filter(service => \n      providers.some(provider => (provider as any)[service.key] > 0)\n    );\n\n    if (activeServices.length === 0) return;\n\n    const datasets = providers.map((provider, index) => ({\n      label: provider.name,\n      data: activeServices.map(service => (provider as any)[service.key] || 0),\n      backgroundColor: [\n        'rgba(255, 159, 67, 0.8)',   // AWS - Orange\n        'rgba(0, 120, 212, 0.8)',    // Azure - Blue\n        'rgba(66, 133, 244, 0.8)',   // GCP - Google Blue\n        'rgba(248, 0, 0, 0.8)'       // Oracle - Red\n      ][index],\n      borderColor: [\n        'rgb(255, 159, 67)',\n        'rgb(0, 120, 212)',\n        'rgb(66, 133, 244)',\n        'rgb(248, 0, 0)'\n      ][index],\n      borderWidth: 1\n    }));\n\n    new window.Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: activeServices.map(s => s.name),\n        datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Monthly Cost ($)'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top' as const\n          }\n        }\n      }\n    });\n  };\n\n  return (\n    <div className=\"space-y-8 mb-8\">\n      {/* Primary Cost Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Monthly Cost Comparison</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <canvas ref={costChartRef}></canvas>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Service Cost Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <canvas ref={breakdownChartRef}></canvas>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Advanced Analysis Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>🌱 Sustainability Metrics</CardTitle>\n            <p className=\"text-sm text-slate-600\">Environmental impact comparison across providers</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <canvas ref={sustainabilityChartRef}></canvas>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>📊 Service-by-Service Comparison</CardTitle>\n            <p className=\"text-sm text-slate-600\">Detailed cost analysis by service category</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <canvas ref={serviceComparisonRef}></canvas>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Advanced Insights */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            🚀 Advanced Cloud Cost Intelligence\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-white dark:bg-slate-800 rounded-lg shadow-sm\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {providers.length > 0 ? Math.round((1 - cheapestProvider.total / Math.max(...providers.map(p => p.total))) * 100) : 0}%\n              </div>\n              <div className=\"text-sm text-slate-600 mt-1\">Cost Optimization</div>\n              <div className=\"text-xs text-slate-500 mt-1\">vs most expensive option</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-white dark:bg-slate-800 rounded-lg shadow-sm\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {providers.length > 0 ? Math.max(...providers.map(p => p.renewableEnergyPercent || 0)) : 0}%\n              </div>\n              <div className=\"text-sm text-slate-600 mt-1\">Best Renewable Energy</div>\n              <div className=\"text-xs text-slate-500 mt-1\">highest among providers</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-white dark:bg-slate-800 rounded-lg shadow-sm\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {/* Count of unique services with costs > 0 */}\n                {providers.length > 0 ? Object.keys(cheapestProvider).filter(key => \n                  !['name', 'total', 'carbonFootprint', 'renewableEnergyPercent'].includes(key) && \n                  (cheapestProvider as any)[key] > 0\n                ).length : 0}\n              </div>\n              <div className=\"text-sm text-slate-600 mt-1\">Active Services</div>\n              <div className=\"text-xs text-slate-500 mt-1\">across your infrastructure</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16061},"client/src/components/cost-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { infrastructureRequirementsSchema, type InfrastructureRequirements } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { FormStep } from \"@/lib/types\";\n\nconst steps: FormStep[] = [\n  { id: \"compute\", title: \"Compute\", completed: false },\n  { id: \"storage\", title: \"Storage\", completed: false },\n  { id: \"database\", title: \"Database\", completed: false },\n  { id: \"networking\", title: \"Network\", completed: false },\n];\n\nexport default function CostForm() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<InfrastructureRequirements>({\n    resolver: zodResolver(infrastructureRequirementsSchema),\n    defaultValues: {\n      compute: {\n        vcpus: 8,\n        ram: 16,\n        instanceType: \"general-purpose\",\n        region: \"us-east-1\",\n      },\n      storage: {\n        size: 500,\n        type: \"ssd-gp3\",\n      },\n      database: {\n        engine: \"mysql\",\n        size: 100,\n      },\n      networking: {\n        bandwidth: 1000,\n        loadBalancer: \"none\",\n      },\n    },\n  });\n\n  const calculateMutation = useMutation({\n    mutationFn: async (data: InfrastructureRequirements) => {\n      const response = await apiRequest(\"POST\", \"/api/calculate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Cost analysis completed\",\n        description: \"Redirecting to results...\",\n      });\n      setLocation(`/results/${data.analysisId}`);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Calculation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InfrastructureRequirements) => {\n    calculateMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <Card className=\"shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold text-slate-900\">\n            Cloud Infrastructure Requirements\n          </CardTitle>\n          <CardDescription>\n            Enter your infrastructure requirements to get cost estimates across all major cloud providers.\n          </CardDescription>\n        </CardHeader>\n\n        {/* Progress Steps */}\n        <div className=\"px-6 pb-4\">\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"flex items-center\">\n                <div className=\"flex items-center text-primary\">\n                  <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-white rounded-full text-sm font-medium\">\n                    {index + 1}\n                  </div>\n                  <span className=\"ml-2 text-sm font-medium\">{step.title}</span>\n                </div>\n                {index < steps.length - 1 && (\n                  <div className=\"w-16 h-0.5 bg-slate-200 mx-4\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <CardContent className=\"space-y-8\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              {/* Compute Section */}\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold text-slate-900\">Compute Requirements</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"compute.vcpus\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>vCPUs</FormLabel>\n                        <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={String(field.value)}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select vCPUs\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"2\">2 vCPUs</SelectItem>\n                            <SelectItem value=\"4\">4 vCPUs</SelectItem>\n                            <SelectItem value=\"8\">8 vCPUs</SelectItem>\n                            <SelectItem value=\"16\">16 vCPUs</SelectItem>\n                            <SelectItem value=\"32\">32 vCPUs</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"compute.ram\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>RAM (GB)</FormLabel>\n                        <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={String(field.value)}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select RAM\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"4\">4 GB</SelectItem>\n                            <SelectItem value=\"8\">8 GB</SelectItem>\n                            <SelectItem value=\"16\">16 GB</SelectItem>\n                            <SelectItem value=\"32\">32 GB</SelectItem>\n                            <SelectItem value=\"64\">64 GB</SelectItem>\n                            <SelectItem value=\"128\">128 GB</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"compute.instanceType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Instance Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select instance type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"general-purpose\">General Purpose</SelectItem>\n                            <SelectItem value=\"compute-optimized\">Compute Optimized</SelectItem>\n                            <SelectItem value=\"memory-optimized\">Memory Optimized</SelectItem>\n                            <SelectItem value=\"storage-optimized\">Storage Optimized</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"compute.region\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Region</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select region\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"us-east-1\">US East (N. Virginia)</SelectItem>\n                            <SelectItem value=\"us-west-2\">US West (Oregon)</SelectItem>\n                            <SelectItem value=\"eu-west-1\">Europe (Ireland)</SelectItem>\n                            <SelectItem value=\"ap-southeast-1\">Asia Pacific (Singapore)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Storage Section */}\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold text-slate-900\">Storage Requirements</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"storage.size\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Storage Size (GB)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"500\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"storage.type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Storage Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select storage type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"ssd-gp3\">SSD (gp3)</SelectItem>\n                            <SelectItem value=\"ssd-io2\">SSD (io2)</SelectItem>\n                            <SelectItem value=\"hdd-st1\">HDD (st1)</SelectItem>\n                            <SelectItem value=\"cold-storage\">Cold Storage</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Database Section */}\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold text-slate-900\">Database Requirements</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"database.engine\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Database Engine</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select database engine\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"mysql\">MySQL</SelectItem>\n                            <SelectItem value=\"postgresql\">PostgreSQL</SelectItem>\n                            <SelectItem value=\"mongodb\">MongoDB</SelectItem>\n                            <SelectItem value=\"redis\">Redis</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"database.size\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Database Size (GB)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"100\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Networking Section */}\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold text-slate-900\">Networking Requirements</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"networking.bandwidth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Bandwidth (GB/month)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"1000\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"networking.loadBalancer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Load Balancer</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select load balancer\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"none\">None</SelectItem>\n                            <SelectItem value=\"application\">Application Load Balancer</SelectItem>\n                            <SelectItem value=\"network\">Network Load Balancer</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex justify-between pt-6\">\n                <Button type=\"button\" variant=\"outline\">\n                  Save Draft\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"bg-primary hover:bg-blue-700\"\n                  disabled={calculateMutation.isPending}\n                >\n                  {calculateMutation.isPending ? \"Calculating...\" : \"Calculate Costs\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16080},"client/src/components/cost-results.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { CloudProvider, CostCalculationResult } from \"@shared/schema\";\nimport CostCharts from \"./cost-charts\";\n\ninterface CostResultsProps {\n  results: CostCalculationResult;\n  analysisId: string;\n}\n\nexport default function CostResults({ results, analysisId }: CostResultsProps) {\n  const handleExportCSV = () => {\n    window.open(`/api/export/${analysisId}/csv`, '_blank');\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-slate-900\">Cost Analysis Results</h2>\n        <p className=\"text-slate-600 mt-2\">\n          Comprehensive cost breakdown across all cloud providers with optimization recommendations.\n        </p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Cheapest Option</p>\n                <p className=\"text-2xl font-bold text-green-600\">{results.cheapest.currencySymbol || '$'}{results.cheapest.total}/mo</p>\n                <p className=\"text-sm text-slate-500\">{results.cheapest.name}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                <span className=\"text-green-600 font-bold text-xl\">🏆</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Most Expensive</p>\n                <p className=\"text-2xl font-bold text-red-600\">{results.mostExpensive.currencySymbol || '$'}{results.mostExpensive.total}/mo</p>\n                <p className=\"text-sm text-slate-500\">{results.mostExpensive.name}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-50 rounded-lg flex items-center justify-center\">\n                <span className=\"text-red-600 font-bold text-xl\">📈</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Potential Savings</p>\n                <p className=\"text-2xl font-bold text-primary\">{results.providers[0]?.currencySymbol || '$'}{results.potentialSavings}/mo</p>\n                <p className=\"text-sm text-slate-500\">\n                  {Math.round((results.potentialSavings / results.mostExpensive.total) * 100)}% reduction\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <span className=\"text-primary font-bold text-xl\">💰</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Multi-Cloud Option</p>\n                <p className=\"text-2xl font-bold text-amber-600\">{results.providers[0]?.currencySymbol || '$'}{results.multiCloudOption.cost}/mo</p>\n                <p className=\"text-sm text-slate-500\">Best hybrid</p>\n              </div>\n              <div className=\"w-12 h-12 bg-amber-50 rounded-lg flex items-center justify-center\">\n                <span className=\"text-amber-600 font-bold text-xl\">🔗</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts */}\n      <CostCharts providers={results.providers} cheapestProvider={results.cheapest} />\n\n      {/* Detailed Comparison Table */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Detailed Cost Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Service</TableHead>\n                  <TableHead>AWS</TableHead>\n                  <TableHead>Azure</TableHead>\n                  <TableHead>GCP</TableHead>\n                  <TableHead>Oracle Cloud</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                <TableRow>\n                  <TableCell className=\"font-medium\">Compute</TableCell>\n                  {results.providers.map((provider) => (\n                    <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                      {provider.currencySymbol || '$'}{provider.compute}/mo\n                    </TableCell>\n                  ))}\n                </TableRow>\n                <TableRow className=\"bg-slate-50\">\n                  <TableCell className=\"font-medium\">Licensing</TableCell>\n                  {results.providers.map((provider) => (\n                    <TableCell key={provider.name} className=\"text-purple-600 font-semibold\">\n                      {provider.currencySymbol || '$'}{provider.licensing || 0}/mo\n                    </TableCell>\n                  ))}\n                </TableRow>\n                <TableRow>\n                  <TableCell className=\"font-medium\">Storage</TableCell>\n                  {results.providers.map((provider) => (\n                    <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                      {provider.currencySymbol || '$'}{provider.storage}/mo\n                    </TableCell>\n                  ))}\n                </TableRow>\n                <TableRow>\n                  <TableCell className=\"font-medium\">Database</TableCell>\n                  {results.providers.map((provider) => (\n                    <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                      {provider.currencySymbol || '$'}{provider.database}/mo\n                    </TableCell>\n                  ))}\n                </TableRow>\n                <TableRow className=\"bg-slate-50\">\n                  <TableCell className=\"font-medium\">Networking</TableCell>\n                  {results.providers.map((provider) => (\n                    <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                      {provider.currencySymbol || '$'}{provider.networking}/mo\n                    </TableCell>\n                  ))}\n                </TableRow>\n                {results.providers[0].analytics !== undefined && (\n                  <TableRow>\n                    <TableCell className=\"font-medium\">Analytics</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.analytics || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].ai !== undefined && (\n                  <TableRow className=\"bg-slate-50\">\n                    <TableCell className=\"font-medium\">AI/ML</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.ai || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].security !== undefined && (\n                  <TableRow>\n                    <TableCell className=\"font-medium\">Security</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.security || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].monitoring !== undefined && (\n                  <TableRow className=\"bg-slate-50\">\n                    <TableCell className=\"font-medium\">Monitoring</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.monitoring || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].devops !== undefined && (\n                  <TableRow>\n                    <TableCell className=\"font-medium\">DevOps</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.devops || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].backup !== undefined && (\n                  <TableRow className=\"bg-slate-50\">\n                    <TableCell className=\"font-medium\">Backup</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.backup || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].iot !== undefined && (\n                  <TableRow>\n                    <TableCell className=\"font-medium\">IoT</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.iot || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].media !== undefined && (\n                  <TableRow className=\"bg-slate-50\">\n                    <TableCell className=\"font-medium\">Media</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.media || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].quantum !== undefined && (\n                  <TableRow>\n                    <TableCell className=\"font-medium\">Quantum Computing</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.quantum || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].advancedAI !== undefined && (\n                  <TableRow className=\"bg-slate-50\">\n                    <TableCell className=\"font-medium\">Advanced AI/ML</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.advancedAI || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].edge !== undefined && (\n                  <TableRow>\n                    <TableCell className=\"font-medium\">Edge & 5G</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.edge || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].confidential !== undefined && (\n                  <TableRow className=\"bg-slate-50\">\n                    <TableCell className=\"font-medium\">Confidential Computing</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.confidential || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].sustainability !== undefined && (\n                  <TableRow>\n                    <TableCell className=\"font-medium\">Sustainability Services</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.sustainability || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].scenarios !== undefined && (\n                  <TableRow className=\"bg-slate-50\">\n                    <TableCell className=\"font-medium\">Advanced Scenarios</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-semibold\" : \"\"}>\n                        {provider.currencySymbol || '$'}{provider.scenarios || 0}/mo\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                <TableRow className=\"bg-primary/5 font-semibold\">\n                  <TableCell className=\"font-bold\">Total Monthly Cost</TableCell>\n                  {results.providers.map((provider) => (\n                    <TableCell key={provider.name} className={provider.name === results.cheapest.name ? \"text-green-600 font-bold\" : \"font-semibold\"}>\n                      {provider.currencySymbol || '$'}{provider.total}/mo\n                    </TableCell>\n                  ))}\n                </TableRow>\n                {/* Sustainability Metrics Row */}\n                {results.providers[0].carbonFootprint !== undefined && (\n                  <TableRow className=\"bg-green-50 border-t-2 border-green-200\">\n                    <TableCell className=\"font-bold text-green-800\">🌱 Carbon Footprint (tons CO2/mo)</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className=\"font-medium text-green-700\">\n                        {provider.carbonFootprint?.toFixed(3) || 'N/A'}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n                {results.providers[0].renewableEnergyPercent !== undefined && (\n                  <TableRow className=\"bg-green-50\">\n                    <TableCell className=\"font-bold text-green-800\">🔋 Renewable Energy %</TableCell>\n                    {results.providers.map((provider) => (\n                      <TableCell key={provider.name} className=\"font-medium text-green-700\">\n                        {provider.renewableEnergyPercent || 'N/A'}%\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recommendations */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>💡 Single-Cloud Recommendation</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-2 h-2 bg-green-600 rounded-full mt-2\"></div>\n              <div>\n                <p className=\"font-medium text-slate-900\">{results.cheapest.name}</p>\n                <p className=\"text-sm text-slate-600\">{results.recommendations.singleCloud}</p>\n              </div>\n            </div>\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <p className=\"text-sm font-medium text-green-600\">\n                {Math.round((results.potentialSavings / results.mostExpensive.total) * 100)}% savings compared to {results.mostExpensive.name}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>🔗 Multi-Cloud Optimization</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-2 h-2 bg-amber-600 rounded-full mt-2\"></div>\n              <div>\n                <p className=\"font-medium text-slate-900\">Hybrid Approach: ${results.multiCloudOption.cost}/month</p>\n                <div className=\"text-sm text-slate-600\">\n                  • Compute: {results.multiCloudOption.breakdown.compute}<br />\n                  • Storage: {results.multiCloudOption.breakdown.storage}<br />\n                  • Database: {results.multiCloudOption.breakdown.database}<br />\n                  • Networking: {results.multiCloudOption.breakdown.networking}\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-amber-50 p-4 rounded-lg\">\n              <p className=\"text-sm font-medium text-amber-600\">\n                Additional ${Math.round((results.cheapest.total - results.multiCloudOption.cost) * 100) / 100}/month savings with multi-cloud setup\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Export Actions */}\n      <div className=\"flex justify-center space-x-4\">\n        <Button variant=\"outline\" onClick={handleExportCSV}>\n          Export to CSV\n        </Button>\n        <Button variant=\"outline\">\n          Generate PDF Report\n        </Button>\n        <Button className=\"bg-primary hover:bg-blue-700\">\n          Save Analysis\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19756},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Navbar() {\n  const [location] = useLocation();\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              <Link href=\"/\">\n                <h1 className=\"text-xl font-bold text-slate-900 cursor-pointer\">\n                  CloudCostOptimizer\n                </h1>\n              </Link>\n            </div>\n          </div>\n          <nav className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-4\">\n              <Link href=\"/\" className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                location === \"/\" \n                  ? \"text-slate-900 hover:text-primary\" \n                  : \"text-slate-600 hover:text-primary\"\n              }`}>\n                Dashboard\n              </Link>\n              <Link href=\"/calculator\" className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                location === \"/calculator\" \n                  ? \"text-slate-900 hover:text-primary\" \n                  : \"text-slate-600 hover:text-primary\"\n              }`}>\n                Calculator\n              </Link>\n            </div>\n          </nav>\n          <div className=\"flex items-center space-x-4\">\n            <Button className=\"bg-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors\">\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1792},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface ChartData {\n  labels: string[];\n  datasets: {\n    label: string;\n    data: number[];\n    backgroundColor: string[];\n    borderColor?: string[];\n    borderWidth?: number;\n  }[];\n}\n\nexport interface FormStep {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n","size_bytes":280},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calculator.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport ComprehensiveCostForm from \"@/components/comprehensive-cost-form\";\n\nexport default function Calculator() {\n  return (\n    <div className=\"bg-slate-50 min-h-screen\">\n      <Helmet>\n        <title>Comprehensive Cost Calculator - CloudCostOptimizer</title>\n        <meta name=\"description\" content=\"Calculate and compare comprehensive cloud costs across AWS, Azure, GCP, and Oracle Cloud including compute, storage, databases, networking, AI/ML, analytics, security, and more.\" />\n      </Helmet>\n      <div className=\"py-8\">\n        <ComprehensiveCostForm />\n      </div>\n    </div>\n  );\n}\n","size_bytes":640},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Home() {\n  return (\n    <div className=\"bg-slate-50 min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"bg-white py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-4xl font-bold text-slate-900 sm:text-5xl\">\n            Optimize Your Cloud Costs\n            <span className=\"text-primary block mt-2\">Across All Providers</span>\n          </h1>\n          <p className=\"mt-6 text-xl text-slate-600 max-w-3xl mx-auto\">\n            Compare comprehensive cloud costs across AWS, Azure, GCP, and Oracle Cloud. \n            Analyze 15+ service categories including AI/ML, analytics, security, IoT, and more with advanced optimization.\n          </p>\n          <div className=\"mt-10 flex justify-center\">\n            <Link href=\"/calculator\">\n              <Button className=\"bg-primary text-white px-8 py-4 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors shadow-lg\">\n                Start Cost Analysis\n              </Button>\n            </Link>\n          </div>\n          <div className=\"mt-16 grid grid-cols-2 gap-8 md:grid-cols-4\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\">15+</div>\n              <div className=\"text-sm text-slate-600\">Service Categories</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\">4</div>\n              <div className=\"text-sm text-slate-600\">Cloud Providers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\">35%</div>\n              <div className=\"text-sm text-slate-600\">Avg. Savings</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary\">150+</div>\n              <div className=\"text-sm text-slate-600\">Cloud Services</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-slate-900\">Why Choose CloudCostOptimizer?</h2>\n            <p className=\"text-slate-600 mt-4\">Comprehensive cost analysis with actionable insights</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-primary font-bold text-xl\">⚡</span>\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">Real-time Analysis</h3>\n                <p className=\"text-slate-600\">Get instant cost comparisons across all major cloud providers with up-to-date pricing data.</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-green-600 font-bold text-xl\">🎯</span>\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">Multi-Cloud Optimization</h3>\n                <p className=\"text-slate-600\">Discover the optimal mix of cloud providers for maximum cost efficiency.</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-amber-50 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-amber-600 font-bold text-xl\">📊</span>\n                </div>\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">Detailed Insights</h3>\n                <p className=\"text-slate-600\">Comprehensive breakdowns with interactive charts and exportable reports.</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-slate-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-slate-900\">CloudCostOptimizer</h3>\n              <p className=\"text-sm text-slate-600\">The most accurate multi-cloud cost optimization platform for enterprises.</p>\n            </div>\n            <div>\n              <h4 className=\"text-sm font-semibold text-slate-900 mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-sm text-slate-600\">\n                <li><a href=\"#\" className=\"hover:text-primary\">Features</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">Pricing</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">API</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-sm font-semibold text-slate-900 mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-sm text-slate-600\">\n                <li><a href=\"#\" className=\"hover:text-primary\">About</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">Blog</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">Contact</a></li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-sm font-semibold text-slate-900 mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-slate-600\">\n                <li><a href=\"#\" className=\"hover:text-primary\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">Documentation</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary\">Status</a></li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-slate-200 mt-8 pt-8 text-center text-sm text-slate-600\">\n            <p>&copy; 2024 CloudCostOptimizer. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6493},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/results.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport CostResults from \"@/components/cost-results\";\nimport type { CostAnalysis } from \"@shared/schema\";\n\nexport default function Results() {\n  const [, params] = useRoute(\"/results/:id\");\n  const analysisId = params?.id;\n\n  const { data: analysis, isLoading, error } = useQuery<CostAnalysis>({\n    queryKey: ['/api/analysis', analysisId],\n    enabled: !!analysisId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-slate-50 min-h-screen\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"mb-8\">\n            <Skeleton className=\"h-10 w-64 mb-2\" />\n            <Skeleton className=\"h-6 w-96\" />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-20 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !analysis) {\n    return (\n      <div className=\"bg-slate-50 min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-2xl font-bold text-slate-900 mb-4\">Analysis Not Found</h1>\n              <p className=\"text-slate-600\">\n                The cost analysis you're looking for could not be found or may have expired.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-slate-50 min-h-screen\">\n      <Helmet>\n        <title>Cost Analysis Results - CloudCostOptimizer</title>\n        <meta name=\"description\" content=\"View detailed cost comparison results across all major cloud providers with optimization recommendations.\" />\n      </Helmet>\n      <CostResults results={analysis.results as any} analysisId={analysisId!} />\n    </div>\n  );\n}\n","size_bytes":2291},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}